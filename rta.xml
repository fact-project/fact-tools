<container>

    <properties url="classpath:/default/settings.properties" />

    <!-- Paths to the input files -->
    <property name="separator" value="file:src/test/resources/prediction_test_files/model.pmml.gz" />
    <property name="estimator" value="file:src/test/resources/prediction_test_files/estimator.pmml.gz" />
    <property name="infile" value="/home/kai/phido_fact/raw/2015/12/" />
    <property name="drsfile" value="classpath:/testDrsFile.drs.fits.gz" />
    <property name="jdbc" value="jdbc:sqlite:/home/kai/rta.sqlite" />


    <property name="integralGainFile" value="classpath:/default/gain_sorted_20131127.csv" />
    <property name="pixelDelayFile" value="classpath:/default/delays_lightpulser_20150217.csv" />

    <!--<service id="auxService" class="fact.auxservice.SqliteService" url="file:/Users/kai/drive_2014.sqlite" />-->
    <service id="auxService" class="fact.auxservice.AuxFileService" auxFolder="file:/home/kai/phido_fact/aux/2015/12/" />

    <service id="calibService" class="fact.calibrationservice.ConstantCalibService" />

    <service id="rf" class="fact.PredictionService" url="${separator}" />
    <service id="regressor" class="fact.PredictionService" url="${estimator}" />

    <service id="rta_service" class="fact.rta.RTAWebService" jdbcConnection="${jdbc}"/>

    <stream class="fact.rta.io.RTAStream" id="fact" folder="${infile}" jdbcConnection="${jdbc}" >
        <stream id="_" class="fact.io.zfits.ZFitsStream"  limit="120" />
    </stream>
    <!--<stream id="fact" class="fact.io.KryoStream"  url="file:./fact_data.kryo" />-->

    <!--<Queue id="out_queue" />-->
    <!--<Queue id="performance_queue" />-->

    <!-- Description of the process and the corresponding stream -->
    <process input="fact" copies="1">
        <!--<Delay time="50ms" />-->
        <fact.DataRate every="50" webService="rta_service" logmemory="true"/>
        <fact.rta.FTMProcessor auxService="auxService" webService="rta_service" />
        <Skip condition="%{data.TriggerType} != 4" />
        <!--<PrintData/>-->

        <Enqueue queues="performance_queue" keys="@timestamp,@thread,@datarate,@freememory,@totalmemory,@maxmemory"/>

        <!--        <Delay time="500ms" /> -->

        <!-- prevEventAndSkip: -->
        <!-- PreviousEventInfo, Skip(no Data Trigger) -->
        <include url="classpath:/default/data/prevEventAndSkip.xml" />
        <!-- Output: Data -->

        <!-- Calibration: -->
        <!-- DrsCalibration, PatchJumpRemoval, RemoveSpikes,
        DrsTimeCalibration, ArrayTimeCorrection, InterpolateBadPixel -->
        <include url="classpath:/default/data/calibration.xml" />
        <!-- Output: DataCalibrated -->


        <!-- Extraction -->
        <!-- BasicExtraction, RisingEdgeForPositions, RisingEdgePolynomFit, TimeOverThreshold,
        PhotonChargeTimeOverThreshold, HandleSaturation, CorrectPixelDelays-->
        <include url="classpath:/default/data/extraction.xml" />
        <!-- Output: photoncharge, arrivalTime -->
        <!-- Cleaning -->
        <!-- SourcePosition(Cetatauri), CoreNeighborCleanTimeNeighbor-->
        <include url="classpath:/default/data/cleaning.xml" />
        <!-- Output: shower -->

        <!-- Parameter calculation (only source independent) -->
        <!-- ArrayMean(photoncharge,arrivalTime), ArrayStatistics(photoncharge,arrivalTime,maxSlopes,
        arrivalTimePos,maxSlopesPos,maxAmplitudePosition,photonchargeSaturated,arrivalTimeTOT),
        Size, DistributionFromShower, M3Long, Length, Width, NumberOfIslands, TimeGraident,
        Concentration, ConcentrationCore, ConcentrationAtCenterOfGravity, Leakage, TimeSpread,
        ShowerSlope, Disp -->
        <include url="classpath:/default/data/parameterCalc.xml" />
        <!-- Output: source independent parameters -->

        <!-- Parameter calculation (only source dependent) -->
        <!-- SourcePosition(${sourcename}), AntiSourcePosition(5), Alpha(for 6 Sources),
        Distance(for 6 Sources), CosDeltaAlpha(for 6 Sources), Theta(for 6 Sources) -->
        <include url="classpath:/default/data/sourceParameter.xml" />


        <Skip condition="%{data.numPixeInShower} &lt; 9" />

            <fact.rta.Energy predictor="regressor" />
            <fact.rta.Signal predictor="rf" webService="rta_service" auxService="auxService"/>
            <!--<fact.rta.RTAProcessor webService="rta_service"/>-->
            <!--<Enqueue queues="out_queue" />-->
    </process>

    <process input="performance_queue">
        <If condition="%{data.@datarate} != null" >
            <fact.io.JSONWriter url="file:./rta_performance.json" keys="@timestamp,@thread,@datarate,@freememory,@totalmemory,@maxmemory"/>
        </If>
    </process>

    <!--<process input="out_queue">-->
        <!--<fact.io.JSONWriter url="file:./rta.json" keys="@timestamp,signal:*,energy,background:*"/>-->
    <!--</process>-->

</container>

