<container>

    <properties url="classpath:/default/settings.properties" />


    <property name="jdbc" value="jdbc:sqlite:./rta.sqlite" />
    <property name="auxfolder" value="file:/fhgfs/groups/app/fact/aux" />

    <service id="rta_service" class="fact.rta.WebSocketService" auxFolder="${auxfolder}"  jdbcConnection="${jdbc}"/>

    <property name="auxService" value="rta_service" />

    <property name="jdbc" value="jdbc:sqlite:rta.sqlite" />

    <property name="infile" value="/fhgfs/groups/app/fact/raw/2013/11/08/"/>

    <property name="integralGainFile" value="classpath:/default/gain_sorted_20131127.csv" />
    <property name="pixelDelayFile" value="classpath:/default/delays_lightpulser_20150217.csv" />

    <service id="drsService" class="fact.DrsFileService" rawDataFolder="file:/fhgfs/groups/app/fact/raw" />
    <service id="calibService" class="fact.calibrationservice.ConstantCalibService" />


    <property name="separator" value="classpath:/prediction_test_files/model.pmml.gz" />
    <service id="rf" class="fact.PredictionService" url="${separator}" />

    <property name="estimator" value="classpath:/prediction_test_files/estimator.pmml.gz" />
    <service id="regressor" class="fact.PredictionService" url="${estimator}" />


    <stream class="fact.rta.io.RTAStream" id="fact" folder="${infile}" jdbcConnection="${jdbc}" >
        <stream id="_" class="fact.io.hdureader.FITSStream" limit="1000" />
    </stream>


    <!-- Description of the process and the corresponding stream -->
    <process input="fact" copies="1">
        <!--<Delay time="50ms" />-->
        <fact.DataRate every="50" logmemory="true"  webService="rta_service"/>
        <Skip condition="%{data.TriggerType} != 4" />

        <!--<Enqueue queues="performance_queue" keys="@timestamp,@thread,@datarate,@freememory,@totalmemory,@maxmemory"/>-->

        <!--        <Delay time="500ms" /> -->

        <!-- prevEventAndSkip: -->
        <!-- PreviousEventInfo, Skip(no Data Trigger) -->
        <include url="classpath:/default/data/prevEventAndSkip.xml" />
        <!-- Output: Data -->

        <!-- Calibration: -->
        <!-- DrsCalibration, PatchJumpRemoval, RemoveSpikes,
        DrsTimeCalibration, ArrayTimeCorrection, InterpolateBadPixel -->
        <fact.datacorrection.DrsCalibration
                drsService="drsService"
                key="Data"
                outputKey="DataCalibrated"
        />
        <fact.datacorrection.PatchJumpRemoval
                dataKey="DataCalibrated"
                outputKey="DataCalibrated"
                prevEventsKey="prevEvents"
                startCellKey="StartCellData"
                jumpLimit="${patchJumpRemoval_jumpLimit}"
        />
        <fact.datacorrection.RemoveSpikes
                dataKey="DataCalibrated"
                outputKey="DataCalibrated"
                startCellKey="StartCellData"
                leftBorder="${removeSpikes_leftBorder}"
                spikeLimit="${removeSpikes_spikeLimit}"
                topSlopeLimit="${removeSpikes_topSlopeLimit}"
                maxSpikeLength="${removeSpikes_maxSpikeLength}"
        />
        <fact.filter.DrsTimeCalibration
                outputKey="timeCalibConst"
        />
        <fact.filter.ArrayTimeCorrection
                dataKey="DataCalibrated"
                timeCalibConstKey="timeCalibConst"
                outputKey="DataCalibrated"
        />
        <fact.datacorrection.InterpolateTimeSeries
                calibService="calibService"
                dataKey="DataCalibrated"
                dataOutputKey="DataCalibrated"
        />
        <!-- Output: DataCalibrated -->


        <!-- Extraction -->
        <!-- BasicExtraction, RisingEdgeForPositions, RisingEdgePolynomFit, TimeOverThreshold,
        PhotonChargeTimeOverThreshold, HandleSaturation, CorrectPixelDelays-->
        <include url="classpath:/default/data/extraction.xml" />
        <!-- Output: photoncharge, arrivalTime -->
        <!-- Cleaning -->
        <!-- SourcePosition(Cetatauri), CoreNeighborCleanTimeNeighbor-->
        <include url="classpath:/default/data/cleaning.xml" />
        <!-- Output: shower -->

        <!-- Parameter calculation (only source independent) -->
        <!-- ArrayMean(photoncharge,arrivalTime), ArrayStatistics(photoncharge,arrivalTime,maxSlopes,
        arrivalTimePos,maxSlopesPos,maxAmplitudePosition,photonchargeSaturated,arrivalTimeTOT),
        Size, DistributionFromShower, M3Long, Length, Width, NumberOfIslands, TimeGraident,
        Concentration, ConcentrationCore, ConcentrationAtCenterOfGravity, Leakage, TimeSpread,
        ShowerSlope, Disp -->
        <include url="classpath:/default/data/parameterCalc.xml" />
        <!-- Output: source independent parameters -->

        <!-- Parameter calculation (only source dependent) -->
        <!-- SourcePosition(${sourcename}), AntiSourcePosition(5), Alpha(for 6 Sources),
        Distance(for 6 Sources), CosDeltaAlpha(for 6 Sources), Theta(for 6 Sources) -->
        <include url="classpath:/default/data/sourceParameter.xml" />

        <!--<PrintData/>-->
        <Skip condition="%{data.numPixeInShower} &lt; 9" />

            <fact.rta.Energy predictor="regressor" />
            <fact.rta.Signal predictor="rf" webService="rta_service"/>
            <!--<Enqueue queues="out_queue" />-->
    </process>

    <!--<process input="performance_queue">-->
        <!--<If condition="%{data.@datarate} != null" >-->
            <!--<fact.io.JSONWriter url="file:./rta_performance.json" keys="@timestamp,@thread,@datarate,@freememory,@totalmemory,@maxmemory"/>-->
        <!--</If>-->
    <!--</process>-->

    <!--<process input="out_queue">-->
        <!--<fact.io.JSONWriter url="file:./rta.json" keys="@timestamp,signal:*,energy,background:*"/>-->
    <!--</process>-->

</container>

