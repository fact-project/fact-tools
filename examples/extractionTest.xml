<container>

    <!-- Pfade zu den fits files. -->
    <!-- <property name="infile" value="/home/fabian/mount/Phido/home_oprfact/ceresTriggerTest/new_trigger/00000003.911_D_MonteCarlo052_Events.fits" /> -->
    <property name="infile" value="/home/fabian/mount/Phido/home_oprfact/00000003.909_D_MonteCarlo017_Events.fits" />
    <property name="drsfile" value="/home/fabian/mount/Phido/fhgfs_app/fact/simulated/drsfiles/12bitADC/offsetMinus1850/test300samples.drs.fits" />
    <property name="drivefile" value="/home/fabian/mount/Phido/fhgfs_app/fact/aux/2013/01/02/20130102.DRIVE_CONTROL_TRACKING_POSITION.fits" />
    <property name="outfile" value="/home/fabian/cherOutputtest.csv" />
    <property name="sourcename" value="crab" />
    <property name="core_threshold" value="5.0" />
    <property name="neighbor_threshold" value="2.0"/>
    <property name="time_threshold" value="30.0" />
    <property name="min_number_of_pixel" value="2" />
    <property name="integral_gain" value="242.0" />


    <!-- Name des Streams und pfad zu dem Daten-File -->
    <stream id="fact" class="fact.io.FitsStream"  url="file:${infile}"/>

    <!-- Beschreibung des zu bearbeitenden Prozesses und zu welchem Stream fieser gehÃ¶rt -->
    <process id="2" input="fact">
        <!-- <stream.flow.Skip condition="%{data.EventNum} &lt; 1510" /> -->
        <!-- <stream.flow.Skip condition="%{data.TriggerType} != 4" /> -->
        <fact.utils.Remapping key="Data" outputKey="Data" />
        <fact.utils.RemappingKeys keys="McCherPhotWeight,McCherPhotNumber,McMuonCherPhotWeight,McNoisePhotWeight,McCherArrTimeMean,McCherArrTimeVar,McCherArrTimeMin,McCherArrTimeMax" />
        <fact.filter.DrsCalibration url="file:${drsfile}" key="Data"  outputKey="DataCalibrated" color="#000000"/>  
        <fact.filter.RemoveSpikesMars key="DataCalibrated" outputkey="DataCalibrated" />

        <fact.features.MaxAmplitudePosition key="DataCalibrated" searchWindowLeft="25" searchWindowRight="125" outputKey="maxAmplitudePosition"/>
        <fact.features.RisingEdgeForPositions datakey="DataCalibrated" amplitudePositionsKey="maxAmplitudePosition" outputkey="arrivalTime"/>
        <fact.features.PhotonCharge key="DataCalibrated" positions="maxAmplitudePosition" outputKey="photoncharge" integralGain="${integral_gain}" color="#FF0F0F"/>

        <fact.cleaning.CoreNeighborClean key="photoncharge" outputKey="shower" keyPositions="arrivalTime" corePixelThreshold="${core_threshold}" neighborPixelThreshold="${neighbor_threshold}" timeThreshold="${time_threshold}"  minNumberOfPixel="${min_number_of_pixel}"/>

        <fact.cleaning.CoreNeighborClean key="McCherPhotWeight" outputKey="truth" keyPositions="McCherArrTimeMean" corePixelThreshold="${core_threshold}" neighborPixelThreshold="${neighbor_threshold}" timeThreshold="${time_threshold}"  minNumberOfPixel="${min_number_of_pixel}"/>

		<fact.features.evaluate.PhotonchargeEvaluate photonchargeKey="photoncharge" arrivalTimeKey="arrivalTime" mcCherenkovWeightKey="McCherPhotWeight" mcCherenkovArrTimeMeanKey="McCherArrTimeMean" mcNoiseWeightKey="McNoisePhotWeight" outputKeyPhotonCharge="qualityFactorPhCh" outputKeyArrivalTime="qualityFactorArrTi"/>
            
        <!-- <fact.io.RootASCIIWriter url="file:${outfile}" keys="qualityFactorPhCh,qualityFactorArrTi"/> -->
        
        <fact.image.ShowImage/>


    </process>


</container>
