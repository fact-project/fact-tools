<container>
  <!-- Analysis of the created pedestal MC files -->
  <properties url="classpath:/default/settings.properties" />

  <property name="pixelDelayFile" value="classpath:/default/delays_lightpulser_20150217.csv" />

  <service id="auxService" class="fact.auxservice.AuxFileService" auxFolder="file:/fact/aux" />
  <service id="calibService" class="fact.calibrationservice.ConstantCalibService" />
  <service id="gainService" class="fact.gainservice.GainService" />
  
  <property name="drsfile" value="" />

  <stream id="fact" class="fact.io.FactFileListMultiStream"   url="${input}">
    <stream class="fact.io.hdureader.FITSStream" id="fact" />
  </stream>

  <process id="2" input="fact">
    <include url="classpath:/analysis/init.xml" />
    <!-- This skips events created by our malfunctioning LED light pulser (27s Events) --> 
    <Skip condition="%{data.saturated_slices_percentage} &gt; 0.2" />
    <!-- Only analyze physics trigger events -->
    <Skip condition="%{data.TriggerType} != 4" />

    <include url="classpath:/analysis/calibration.xml" />
    <include url="classpath:/analysis/extraction.xml" />
    <include url="classpath:/analysis/cleaning.xml" />


    <!-- Only analyze events with at least 5 pixels after cleaning -->
    <Skip condition="%{data.num_pixel_in_shower} &lt; 5" />

    <include url="classpath:/analysis/pedestalParameters.xml" />
    <include url="classpath:/analysis/imageParameters.xml" />
    <include url="classpath:/analysis/sourcePosition.xml" />


    <fact.utils.SanitizeKeys />

      <fact.io.JSONWriter keys="${outputKeysSimulations}"
            url="${output}"
            writeListOfItems="True"
            specialDoubleValuesAsString="True"
            pixelSetsAsInt="True"
      />
    <!--<fact.io.FITSWriter url="${outfile}"/>-->
    
  </process>
</container>
