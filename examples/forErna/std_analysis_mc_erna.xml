<container>
    <!--
    This Process contains the standard analysis for FACT, with modifications to be used with the SGE/TORQUE cluster
    execution tool ERNA (Easy RuN Access) https://github.com/fact-project/erna
    -->
    <properties url="classpath:/default/settings_mc.properties" />

    <property name="integralGainFile" value="classpath:/default/defaultIntegralGains.csv" />

    <service id="calibService" class="fact.calibrationservice.ConstantCalibService" />

    <!-- Has to be a  FactFileListMultiStream in order to work on tasks from gridmap and the executor script.-->
    <stream id="fact" class="fact.io.FactFileListMultiStream"   url="${input}">
        <stream class="fact.io.zfits.ZFitsStream" id="_" />
    </stream>

    <process id="1" input="fact">

        <fact.utils.Remapping
                key="Data"
                outputKey="Data"
        />
        <fact.utils.RemappingKeys
                keys="McCherPhotWeight,McCherPhotNumber,McMuonCherPhotWeight,McNoisePhotWeight,McCherArrTimeMean,McCherArrTimeVar,McCherArrTimeMin,McCherArrTimeMax"
        />

        <fact.datacorrection.DrsCalibration
                key="Data"
                outputKey="DataCalibrated"
        />

        <fact.datacorrection.RemoveSpikes
                dataKey="DataCalibrated"
                outputKey="DataCalibrated"
                startCellKey="StartCellData"
                leftBorder="${removeSpikes_leftBorder}"
                spikeLimit="${removeSpikes_spikeLimit}"
                topSlopeLimit="${removeSpikes_topSlopeLimit}"
                maxSpikeLength="${removeSpikes_maxSpikeLength}"
        />
        <fact.datacorrection.InterpolateTimeSeries
                calibService="calibService"
                dataKey="DataCalibrated"
                dataOutputKey="DataCalibrated"
        />

        <!-- Extraction -->
        <!-- BasicExtraction, RisingEdgeForPositions, RisingEdgePolynomFit, TimeOverThreshold,
        PhotonChargeTimeOverThreshold, HandleSaturation, CorrectPixelDelays-->
        <include url="classpath:/default/mc/extraction_mc.xml" />
        <!-- Output: photoncharge, arrivalTime -->

        <!-- Cleaning -->
        <!-- SourcePosition(Cetatauri), CoreNeighborCleanTimeNeighbor-->
        <include url="classpath:/default/mc/cleaning_mc.xml" />
        <!-- Output: shower -->

        <!-- Parameter calculation (only source independent) -->
        <!-- ArrayMean(photoncharge,arrivalTime), ArrayStatistics(photoncharge,arrivalTime,maxSlopes,
        arrivalTimePos,maxSlopesPos,maxAmplitudePosition,photonchargeSaturated,arrivalTimeTOT),
        Size, DistributionFromShower, M3Long, Length, Width, NumberOfIslands, TimeGraident,
        Concentration, ConcentrationCore, ConcentrationAtCenterOfGravity, Leakage, TimeSpread,
        ShowerSlope, Disp -->
        <include url="classpath:/default/mc/parameterCalc_mc.xml" />
        <!-- Output: source independent parameters -->

        <!-- Parameter calculation (only source dependent) -->
        <!-- SourcePosition(${sourcename}), AntiSourcePosition(5), Alpha(for 6 Sources),
        Distance(for 6 Sources), CosDeltaAlpha(for 6 Sources), Theta(for 6 Sources) -->
        <include url="classpath:/default/mc/sourceParameter_mc.xml" />
        <!-- Output: source dependent parameters -->

        <!-- its important that you output a valid json file for this to work in conjuction with gridmap -->
	<fact.io.JSONWriter keys="${keysForOutput}" 
		url="${output}" 
		writeListOfItems="True" 
		specialDoubleValuesAsString="True"
		pixelSetsAsInt="True"
		/>
	<!-- <PrintData/> -->
	<!-- <fact.io.PrintKeysOnConsole keys="${keysForOutput}" /> -->
    </process>
</container>
