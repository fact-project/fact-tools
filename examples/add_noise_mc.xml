<container>
    <properties url="classpath:/default/settings_mc.properties" />
    
    <property name="integralGainFile" value="classpath:/default/defaultIntegralGains.csv" />

    <service id="calibService" class="fact.calibrationservice.ConstantCalibService" />
    
    
	<property name="noiseDB" value="file:noisedb.json" />
	<property name="dataFolder" value="/path/to/data/" />
    
    <property name="patchJumpRemoval_jumpLimit" value="2.0" />

    <!--In case you want to analyze .zfits files.-->
    <stream id="fact" class="fact.io.FactFileListMultiStream"   url="${input}">
        <stream class="fact.io.zfits.ZFitsStream" id="fact" />
	</stream>

    <process id="1" input="fact">
		<fact.utils.Remapping
                key="Data"
                outputKey="Data"
        />
        <fact.utils.RemappingKeys
                keys="McCherPhotWeight,McCherPhotNumber,McMuonCherPhotWeight,McNoisePhotWeight,McCherArrTimeMean,McCherArrTimeVar,McCherArrTimeMin,McCherArrTimeMax"
        />

        <fact.datacorrection.DrsCalibration
                key="Data"
                outputKey="DataCalibrated"
        />

        <fact.datacorrection.RemoveSpikes
                dataKey="DataCalibrated"
                outputKey="DataCalibrated"
                startCellKey="StartCellData"
                leftBorder="${removeSpikes_leftBorder}"
                spikeLimit="${removeSpikes_spikeLimit}"
                topSlopeLimit="${removeSpikes_topSlopeLimit}"
                maxSpikeLength="${removeSpikes_maxSpikeLength}"
        />
        <fact.datacorrection.InterpolateTimeSeries
                calibService="calibService"
                dataKey="DataCalibrated"
                dataOutputKey="DataCalibrated"
        />
        
        
	<!-- Sample Pedestal Event and calibrate it -->	
		<fact.utils.SamplePedestalEvent prependKey="PED_" noiseDatabase="${noiseDB}" dataFolder="${dataFolder}" dbBinningKey="Zd" itemBinningKey="MPointingPos.fZd" binning="2" noiseCondition="(%{data.currents} &lt; 7 )&amp;( %{data.source} = 'crab')"/>
    
        <fact.datacorrection.DrsCalibration
                drsKey="PED_drspath"
                key="PED_Data"
                outputKey="PED_DataCalibrated"
                startCellKey="PED_StartCellData"
        />
        <fact.datacorrection.PatchJumpRemoval
                dataKey="PED_DataCalibrated"
                outputKey="PED_DataCalibrated"
                prevEventsKey="PED_prevEvents"
                startCellKey="PED_StartCellData"
                jumpLimit="${patchJumpRemoval_jumpLimit}"
        />
         <fact.datacorrection.RemoveSpikes
                dataKey="PED_DataCalibrated"
                outputKey="PED_DataCalibrated"
                startCellKey="PED_StartCellData"
                leftBorder="${removeSpikes_leftBorder}"
                spikeLimit="${removeSpikes_spikeLimit}"
                topSlopeLimit="${removeSpikes_topSlopeLimit}"
                maxSpikeLength="${removeSpikes_maxSpikeLength}"
        />
        <fact.filter.DrsTimeCalibration
                outputKey="PED_timeCalibConst"
                startCellkey="PEAD_StartCellData"
                dataKey="PED_DataCalibrated"
                outputKey="PED_DataCalibrated"
                drsTimeKey="PED_CellOffset"
        />
        <fact.filter.ArrayTimeCorrection
                dataKey="PED_DataCalibrated"
                timeCalibConstKey="PED_timeCalibConst"
                outputKey="PED_DataCalibrated"
        />
        <fact.datacorrection.InterpolateTimeSeries
                calibService="calibService"
                dataKey="PED_DataCalibrated"
                dataOutputKey="PED_DataCalibrated"
                badPixelKey="PED_badPixel"
                unixTimeKey="PED_UnixTimeUTC"
        />
    
		<fact.utils.CombineDataArrays firstArrayKey="DataCalibrated" secondArrayKEy="PED_DataCalibrated" outputKey="DataCalibrated" op="add"/>
        
         <fact.datacorrection.DrsCalibration
                key="DataCalibrated"
                outputKey="Data"
                reverse="true"
        />
        <fact.utils.Remapping
                key="Data"
                outputKey="Data"
                reverse="True"
        />

		<fact.io.FITSWriter url="${output}" keys="Data,StartCellData,NIGHT,RUNID,UnixTimeUTC, PED_currents,PED_NIGHT,PED_RUNID,PED_Zd,PED_UnixTimeUTC,MPointingPos.fZd,MPointingPos.fAd,MSimSourcePos.fZd,MSimSourcePos.fAd"/>
    </process>
</container>
