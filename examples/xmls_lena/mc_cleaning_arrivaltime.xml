<container>

    <properties url="classpath:/default/settings_mc.properties" />


    <!-- Pathes to the input files -->
<!--    <property name="num_copies" value="1" />-->

    <property name="infolder" value="file:/home/lena/Dokumente/Masterarbeit/FACT_Data/MC/Proton/" />
    <property name="outfolder" value="file:/home/lena/Dokumente/Masterarbeit/CleaningArrivaltime/" />

    <!-- Pathes to the input files -->
    <!--    <property name="infile" value="file:/home/lena/Dokumente/Masterarbeit/FACT_Data/MonteCarlo/mc_gamma_11981.fits.gz" />
        <property name="infile" value="file:/home/lena/Dokumente/Masterarbeit/FACT_Data/MonteCarlo/00000001.001_P_MonteCarlo000_Events.fits" />-->

    <!--    <property name="drsfile" value="classpath:/testMcDrsFile.drs.fits.gz" />-->
    <property name="drsfile" value="file:src/main/resources/testMcDrsFile.drs.fits.gz" />
    <property name="integralGainFile" value="classpath:/default/gain_sorted_20131127.csv" />

    <service id="auxService" class="fact.auxservice.AuxFileService" auxFolder="file:src/main/resources/aux/" />

    <!--    <property name="integralGainFile" value="classpath:/default/defaultIntegralGains.csv" />-->

<!--    <stream id="fact:${copy.id}" class="fact.io.RecursiveDirectoryStream"
            suffix="fits.gz" copies="${num_copies}" url="${infolder}">
        <stream class="fact.io.FitsStream" id="_" />
    </stream>-->


    <!-- Name of the stream and url to the input file -->
        <stream id="fact" class="fact.io.FitsStream"  url="${infolder}" limit="50"/>

<!--    <stream id="fact" class="fact.io.RecursiveDirectoryStream"
            suffix="_Events.fits.gz" url="${infolder}">
        <stream class="fact.io.FitsStream" id="_" />
    </stream>-->


    <!-- Description of the process and the corresponding stream -->
    <!-- <process id="2" input="fact">-->
    <process id="2" input="fact">
        <stream.flow.Skip condition="%{data.EventNum} &lt; 0" />
        <!-- <stream.flow.Skip condition="%{data.MCorsikaEvtHeader.fTotalEnergy} &gt; 400" /> -->
        <!--        <fact.io.PrintKeysOnConsole keys="MCorsikaEvtHeader.fTotalEnergy" />-->
        <!-- <stream.flow.Skip condition="%{data.EventNum} &lt; 0" /> -->

        <include url="classpath:/default/mc/calibration_mc.xml" />

        <!--        <include url="classpath:/default/mc/extraction_mc.xml" />-->

        <!--        <include url="classpath:/default/mc/cleaning_mc.xml" />-->

        <!-- <Skip condition="%{data.shower} == null" /> -->

        <fact.extraction.BasicExtraction
                dataKey="DataCalibrated"
                outputKeyMaxAmplPos="maxPos"
                outputKeyPhotonCharge="photoncharge"
                url="${integralGainFile}"
                startSearchWindow="${basicExtraction_startSearchWindow}"
                rangeSearchWindow="${basicExtraction_rangeSearchWindow}"
                rangeHalfHeightWindow="${basicExtraction_rangeHalfHeigthWindow}"/>

                <fact.lightpulser.BrightnessStatistics />

        <fact.extraction.RisingEdgeForPositions
                dataKey="DataCalibrated"
                outputKey="ArrtimePos"
                amplitudePositionsKey="maxPos"
                maxSlopesKey="maxSlope"/>


        <fact.cleaning.MotionCleaning
                threshold = "30"
                outputKey = "shower"/>


        <Skip condition="%{data.NumClusterPixel}>-40 "/>

        <fact.features.Size
                showerKey="shower"
                photonChargeKey="photoncharge"
                outputKey="Size"
                />

        <fact.features.DistributionFromShower
                weightsKey="photoncharge"
                showerKey="shower"
                sizeKey="Size"
                outputKey="showerDistribution"
                />

        <fact.cleaning.ArrivaltimeCleaning
                outputKeyXCoordinate="TrafoX"
                outputKeyYCoordinate="TrafoY"
                outputKeyArrtimePos="ArrtimePosCleaning"
                showerKey="shower"/>













       <!-- <fact.cleaning.MotionCleaning />-->



        <fact.hexmap.FellWalker />

        <Skip condition="%{data.NumCluster}==0 "/>-->

       <!-- <fact.io.JSONWriter keys="EventNum,countMotion,countArrtime,countMerge" url="${outfolder}proton.json" />-->


        <fact.ShowViewer key="DataCalibrated"/>

    </process>


</container>
