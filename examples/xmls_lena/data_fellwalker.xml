<application>

    <properties url="classpath:/default/settings.properties" />

    <property name="num_copies" value="2"/>
    <!-- Pathes to the input files -->

    <!--<property name="twoLevelTimeNeighbor_neighborThreshold" value="2.0" />-->
    <!--<property name="twoLevelTimeNeighbor_coreThreshold" value="4.0" />-->


    <property name="infile" value="file:/Users/lena/Documents/Masterarbeit/FACT_Data/Crab/20130929/20130929_179.fits.gz" />
    <property name="drsfile" value="file:/Users/lena/Documents/Masterarbeit/FACT_Data/Crab/20130929/20130929_167.drs.fits.gz"/>

    <property name="outfolder" value="file:/Users/lena/Documents/Masterarbeit/Missmatch/" />
    <property name="filename" value="data_crab_20130929_179_smooth" />

    <property name="integralGainFile" value="classpath:/default/defaultIntegralGains.csv" />
    <property name="pixelDelayFile" value="classpath:/default/delays_lightpulser_20150217.csv" />

    <property name="auxFolder" value="file:/fhgfs/groups/app/fact/aux/2013/09/29/" />
    <!--<property name="auxFolder" value="file:src/main/resources/aux/" />-->

    <service id="auxService" class="fact.auxservice.AuxFileService" auxFolder="${auxFolder}" />

    <service id="calibService" class="fact.calibrationservice.ConstantCalibService" />

    <!--<stream id="fact" class="fact.io.zfits.ZFitsStream"  url="${infile}"/>-->

    <stream id="fact:${copy.id}" class="fact.io.FitsStream" copies="${num_copies}" url="${infile}" limit="5000"/>

    <!-- Description of the process and the corresponding stream -->
    <queue id="processOutput" />
    <process id="2" input="fact:${copy.id}" copies="${num_copies}">

        <stream.flow.Skip condition="%{data.TriggerType} != 4" />


        <!--<Skip condition="%{data.EventNum} != 4 "/>-->

        <include url="classpath:/default/data/prevEventAndSkip.xml" />

        <include url="classpath:/default/data/calibration.xml" />

        <include url="classpath:/default/data/extraction.xml" />

        <include url="classpath:/default/data/cleaning.xml" />

        <include url="classpath:/default/data/parameterCalc.xml" />

        <include url="classpath:/default/data/sourceParameter.xml" />


        <fact.filter.SmoothBell
                inputKey="photoncharge"
                outputKey="smoothData"
        />


        <fact.filter.ShapeSignal
                key="DataCalibrated"
                outputKey="DataShaped"
                shift="10"
        />

        <fact.extraction.MeanCorrelation
                key="DataShaped"
                amplitudePositionsKey="maxPos"
                skipLast="50"
                correlationKey="meanCorrelation"
        />


        <fact.cleaning.TwoLevelTimeNeighbor
                calibService="calibService"
                photonChargeKey="meanCorrelation"
                outputKey="showerCorrelation"
                arrivalTimeKey="meanCorrelation"
                corePixelThreshold="3.0"
                neighborPixelThreshold="2.5"
                timeLimit="${twoLevelTimeNeighbor_timeLimit}"
                minNumberOfPixel="${twoLevelTimeNeighbor_minNumberOfPixel}"
        />



        <Skip condition="%{data.showerCorrelation} == null" />


        <fact.pixelsets.Length
                pixelSetKey="showerCorrelation"
                outputKey="showerCorrelationLength"
        />

        <Skip condition="%{data.showerCorrelationLength} &lt; 10" />




        <fact.features.watershed.ClusterFellwalker
                arrivaltimePosKey="arrivalTime"
                photonchargeKey="photoncharge"
                pixelSetKey="showerCorrelation"
                morphologyKey="smoothData"
                minShowerpixel="2"
        />



        <!--<Skip condition="%{data.numCluster} == null" />-->




        <!--<fact.ShowViewer key="DataCalibrated"/>-->

        <!--<fact.io.JSONWriter keys="MCorsikaEvtHeader.fTotalEnergy,numCluster,boundRatio,idealBoundDiff,boundAngle,distanceCenter,distanceCog,distanceSource,neighborCluster,chargeMax,maxClusterNumPixel,numClusterPixel,stdNumPixel,convexity,stdArrivaltime,clusterNoCleaning,numClusterAT,boundRatioAT,idealBoundDiffAT,distanceCenterAT,chargeMaxAT,stdNumPixelAT" url="${outfolder}${filename}.json"/>-->


        <fact.io.JSONWriter
                keys="numCluster,boundRatio,idealBoundDiff,boundAngle,distanceCenter,distanceCog,distanceSource,neighborCluster,chargeMax,maxClusterNumPixel,numClusterPixel,stdNumPixel,convexity,label"
                url="${outfolder}${filename}.json"
        />
        <Enqueue queue="processOutput" condition="%{data.numCluster}!=0" />

        </process>


        <!--<fact.io.PrintKeysOnConsole keys="numCluster,boundRatio,idealBoundDiff,boundAngle,distanceCenter,neighborCluster,chargeMax,maxClusterNumPixel,numClusterPixel,stdNumPixel,convexity" />-->


    <process input="processOutput" id="3" >
        <!--<fact.io.JSONWriter keys="MCorsikaEvtHeader.fTotalEnergy,${stat_allPix_param},${stat_phCharge_param},${stat_arrTime_param},${stat_maxSlopes_param},${stat_arrTimePos_param},${stat_maxSlopesPos_param},${stat_maxPos_param},${spread_param},${shower_param},${conc_param},Theta,Alpha,Distance,CosDeltaAlpha,numCluster,boundRatio,idealBoundDiff,boundAngle,distanceCenter,distanceCog,distanceSource,neighborCluster,chargeMax,maxClusterNumPixel,numClusterPixel,stdNumPixel,convexity,stdArrivaltime,clusterNoCleaning,numClusterAT,boundRatioAT,idealBoundDiffAT,distanceCenterAT,chargeMaxAT,stdNumPixelAT" url="${outfolder}${filename}.json"/>-->

        <!--<fact.io.JSONWriter keys="${stat_allPix_param},${stat_phCharge_param},${stat_arrTime_param},${stat_maxSlopes_param},${stat_arrTimePos_param},${stat_maxSlopesPos_param},${stat_maxPos_param},${spread_param},${shower_param},${conc_param},Theta,Alpha,Distance,CosDeltaAlpha,numCluster,boundRatio,idealBoundDiff,boundAngle,distanceCenter,distanceCog,distanceSource,neighborCluster,chargeMax,maxClusterNumPixel,numClusterPixel,stdNumPixel,convexity,stdArrivaltime,clusterNoCleaning,numClusterAT,boundRatioAT,idealBoundDiffAT,distanceCenterAT,chargeMaxAT,stdNumPixelAT" url="${outfolder}${filename}.json"/>-->

        <!--<fact.io.JSONWriter keys="numCluster,boundRatio,idealBoundDiff,boundAngle,distanceCenter,distanceCog,distanceSource,neighborCluster,chargeMax,maxClusterNumPixel,numClusterPixel,stdNumPixel,convexity,stdArrivaltime,clusterNoCleaning,numClusterAT,boundRatioAT,idealBoundDiffAT,distanceCenterAT,chargeMaxAT,stdNumPixelAT" url="${outfolder}${filename}.json"/>-->
        <!--<fact.ShowViewer key="DataCalibrated"/>-->

        <fact.io.JSONWriter
                keys="numCluster,boundRatio,idealBoundDiff,boundAngle,distanceCenter,distanceCog,distanceSource,neighborCluster,chargeMax,maxClusterNumPixel,numClusterPixel,stdNumPixel,convexity,label"
                url="${outfolder}${filename}.json"
        />

        <!--<fact.io.PrintKeysOnConsole keys="numClusterAT,boundRatioAT,idealBoundDiffAT,distanceCenterAT,chargeMaxAT,stdNumPixelAT" />-->

    </process>


</application>