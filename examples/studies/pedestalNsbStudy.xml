<container>
  <properties url="classpath:/default/settings.properties" />
  <!-- Pathes to the input files -->
  <property name="infile" value="classpath:/testDataFile.fits.gz" />
  <property name="drsfile" value="classpath:/testDrsFile.drs.fits.gz" />
  
  <property name="pixelDelayFile" value="classpath:/default/delays_lightpulser_20150217.csv" />
  <service id="auxService" class="fact.auxservice.AuxFileService" auxFolder="file:src/main/resources/aux/" />
  <service id="calibService" class="fact.calibrationservice.ConstantCalibService" />
  <service id="gainService" class="fact.gainservice.GainService" />
  <!-- Name des Streams und pfad zu dem Daten-File -->
  <stream id="fact" class="fact.io.hdureader.FITSStream" url="${infile}" limit="3" />
  <!-- Beschreibung des zu bearbeitenden Prozesses und zu welchem Stream dieser gehÃ¶rt -->
  <process id="2" input="fact">
    <fact.utils.PreviousEventInfo startCellKey="StartCellData" outputKey="prevEvents" limitEvents="20" />
    <!--<stream.flow.Skip condition="%{data.TriggerType} != 4" />-->
    <fact.datacorrection.DrsCalibration url="${drsfile}" key="Data" outputKey="DataCalibrated" />
    <!--<fact.datacorrection.PatchJumpRemoval dataKey="DataCalibrated" outputKey="DataCalibrated" prevEventsKey="prevEvents" startCellKey="StartCellData" jumpLimit="2.0" />-->
    <fact.datacorrection.RemoveSpikes dataKey="DataCalibrated" outputKey="DataCalibrated" startCellKey="StartCellData" leftBorder="6" spikeLimit="20" topSlopeLimit="16" maxSpikeLength="4" />
    <fact.datacorrection.InterpolateTimeSeries calibService="calibService" interpolateTimeLine="True" dataKey="DataCalibrated" dataOutputKey="DataCalibrated" />
    <fact.extraction.BasicExtraction dataKey="DataCalibrated" outputKeyMaxAmplPos="maxPos" outputKeyPhotonCharge="photoncharge" gainService="gainService" startSearchWindow="${BasicExtraction.startSearchWindow}"
    rangeSearchWindow="${BasicExtraction.rangeSearchWindow}" rangeHalfHeightWindow="25" />
    <fact.extraction.RisingEdgeForPositions dataKey="DataCalibrated" amplitudePositionsKey="maxPos" outputKey="arrivalTimePos" maxSlopesKey="maxSlopesPos" />
    <fact.extraction.RisingEdgePolynomFit dataKey="DataCalibrated" risingEdgeKey="arrivalTimePos" outputKey="arrivalTime" numberOfPoints="11" maxSlopesKey="maxSlopes" />
    <fact.filter.MovingAverage key="DataCalibrated" outputKey="DataSmothed" length="5" />
    <fact.statistics.TimeseriesFeatures dataKey="DataCalibrated" movingAverageKey="DataSmothed" searchWindowLeft="35" searchWindowRight="200" outputKey="voltages" />
    <!--<fact.features.TimeSpread weightsKey="photoncharge" arrivalTimeKey="arrivalTime" showerKey="shower" outputKey="Timespread" />-->
    <!---->
    <fact.extraction.WaveformFluctuation key="DataCalibrated" outputKey="Nsb" skipFirst="35" skipLast="100" windowSize="30" />
    <fact.utils.SelectValueByChid key="Nsb_std" chid="286" outputKey="Nsb_rms_1" />
    <!--<fact.plotter.HistogramPlotter key="Nsb_rms_1" binWidth="1" logAxis="true" color="#666699" />-->
    <fact.utils.SelectValueByChid key="Nsb_mean" chid="286" outputKey="Nsb_mean_1" />
    <!--<fact.plotter.HistogramPlotter key="Nsb_mean_1" binWidth="1" logAxis="true" color="#666699" />-->
    <fact.utils.SelectArrayByChid key="Nsb" chid="286" outputKey="Nsb_1" />
    <!--<fact.plotter.HistogramArrayPlotter key="Nsb_1" binWidth="1" logAxis="true" color="#666699" />-->
    <!--<fact.plotter.HistogramArrayPlotter key="Nsb_rms" binWidth="1" logAxis="true" color="#666699" />-->
    <!--<fact.plotter.HistogramArrayPlotter key="Nsb_mean" binWidth="1" logAxis="true" color="#666699" />-->
    <!--<fact.plotter.HistogramArrayPlotter key="photoncharge" binWidth="1" logAxis="true" color="#666699" />-->
    <fact.utils.SelectValueByChid key="voltages_mean" chid="286" outputKey="voltages_mean_1" />
    <!--<fact.plotter.HistogramPlotter key="voltages_mean_1" binWidth="1" logAxis="true" color="#666699" />-->
    <!--<fact.ShowViewer key="DataCalibrated"/>-->
    <!--<fact.io.JSONWriter url="file:${outfile}" keys="Nsb,Nsb_mean,Nsb_rms"/>-->
  </process>
</container>
