<container>
	<properties url="classpath:/default/settings.properties" />
	<!-- Pathes to the input files -->
	<property name="infile" value="file:src/main/resources/testMcFile.fits.gz" />
	<property name="drsfile" value="file:src/main/resources/testMcDrsFile.drs.fits.gz" />
	<property name="integral_gain_file" value="classpath:/default/defaultIntegralGains.csv" />

	<service id="calib_service" class="fact.calibrationservice.ConstantCalibService" />

	<!-- Name of the stream and url to the input file -->
	<stream id="fact" class="fact.io.FITSStream" url="${infile}" />

	<process id="2" input="fact">
		<fact.utils.Remapping
				key="Data"
				outputKey="Data"
		/>
		<fact.utils.RemappingKeys
				keys="McCherPhotWeight,McCherPhotNumber,McMuonCherPhotWeight,McNoisePhotWeight,McCherArrTimeMean,McCherArrTimeVar,McCherArrTimeMin,McCherArrTimeMax"
		/>
		<fact.datacorrection.DrsCalibration
				url="${drsfile}"
				key="Data"
				outputKey="data_calibrated"
		/>
		<fact.datacorrection.RemoveSpikes
				dataKey="data_calibrated"
				outputKey="data_calibrated"
				startCellKey="StartCellData"
				leftBorder="${remove_spikes_left_border}"
				spikeLimit="${remove_spikes_spike_limit}"
				topSlopeLimit="${remove_spikes_top_slope_limit}"
				maxSpikeLength="${remove_spikes_max_spike_length}"
		/>
		<fact.datacorrection.InterpolateTimeSeries
				calibService="calib_service"
				dataKey="data_calibrated"
				dataOutputKey="data_calibrated"
		/>

		<fact.extraction.BasicExtraction
				dataKey="data_calibrated"
				outputKeyMaxAmplPos="max_pos"
				outputKeyPhotonCharge="photoncharge"
				url="${integral_gain_file}"
				startSearchWindow="${basic_extraction_start_search_window}"
				rangeSearchWindow="${basic_extraction_range_search_window}"
				rangeHalfHeightWindow="${basic_extraction_range_half_heigth_window}"
		/>
		<fact.extraction.EstimateBaseline
				dataKey="data_calibrated"
				outputKey="baseline"
				firstSlice="10"
				range="30"
		/>
		<fact.extraction.TimeOverThreshold
				dataKey="data_calibrated"
				outputKey="time_over_threshold"
				firstSliceOverThresholdOutputKey="arrival_time_tot"
				positionsKey="max_pos"
				threshold="1800"
				thresholdOutputKey="threshold_for_tot"
		/>
		<fact.datacorrection.CorrectSaturation
				dataKey="data_calibrated"
				outputKey="data_calibrated"
				totKey="time_over_threshold"
				firstSliceOverThresholdKey="arrival_time_tot"
				threshold="1800"
				maxPosKey="max_pos"
				baselineKey="baseline"
		/>
		<fact.extraction.BasicExtraction
				dataKey="data_calibrated"
				outputKeyMaxAmplPos="max_pos"
				outputKeyPhotonCharge="photoncharge"
				url="${integral_gain_file}"
				startSearchWindow="${basic_extraction_start_search_window}"
				rangeSearchWindow="${basic_extraction_range_search_window}"
				rangeHalfHeightWindow="${basic_extraction_range_half_heigth_window}"
		/>
		<fact.extraction.RisingEdgeForPositions
				dataKey="data_calibrated"
				amplitudePositionsKey="max_pos"
				outputKey="arrival_time_pos"
				maxSlopesKey="max_slopes_pos"
		/>


		<fact.extraction.RisingEdgePolynomFit
				dataKey="data_calibrated"
				risingEdgeKey="arrival_time_pos"
				outputKey="arrival_time"
				numberOfPoints="11"
				maxSlopesKey="max_slopes"
		/>
		<fact.datacorrection.InterpolatePhotondata
				calibService="calib_service"
				photonChargeKey="photoncharge"
				photonChargeOutputKey="photoncharge"
				arrivalTimeKey="arrival_time"
				arrivalTimeOutputKey="arrival_time"
		/>

		<fact.cleaning.TwoLevelTimeMedian
				calibService="calib_service"
				photonChargeKey="photoncharge"
				outputKey="shower"
				arrivalTimeKey="arrival_time"
				corePixelThreshold="${two_level_time_neighbor_core_threshold}"
				neighborPixelThreshold="${two_level_time_neighbor_neighbor_threshold}"
				timeLimit="${two_level_time_neighbor_time_limit}"
				minNumberOfPixel="${two_level_time_neighbor_min_number_of_pixel}"
		/>

		<fact.cleaning.TwoLevelTimeMedian
				calibService="calib_service"
				photonChargeKey="McCherPhotWeight"
				outputKey="truth"
				arrivalTimeKey="McCherArrTimeMean"
				corePixelThreshold="${two_level_time_neighbor_core_threshold}"
				neighborPixelThreshold="${two_level_time_neighbor_neighbor_threshold}"
				timeLimit="${two_level_time_neighbor_time_limit}"
				minNumberOfPixel="${two_level_time_neighbor_min_number_of_pixel}"
		/>

		<fact.features.evaluate.PhotonchargeEvaluate
				photonchargeKey="photoncharge"
				arrivalTimeKey="arrival_time"
				mcCherenkovWeightKey="McCherPhotWeight"
				mcCherenkovArrTimeMeanKey="McCherArrTimeMean"
				mcNoiseWeightKey="McNoisePhotWeight"
				outputKeyPhotonCharge="qualityFactorPhCh"
				outputKeyArrivalTime="qualityFactorArrTi"
		/>

		<!-- <fact.io.RootASCIIWriter url="file:${outfile}" keys="qualityFactorPhCh,qualityFactorArrTi"/> -->
	</process>
</container>
