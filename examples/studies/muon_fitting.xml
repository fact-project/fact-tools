<container>

  <properties url="classpath:/default/settings.properties" />

  <!-- Pathes to the input files -->
  <property name="infile" value="file:src/main/resources/testMcFile.fits.gz" />
  <property name="drsfile" value="file:src/main/resources/testMcDrsFile.drs.fits.gz" />
  <property name="auxFolder" value="file:src/main/resources/aux/" />

  <property name="integralGainFile" value="classpath:/default/defaultIntegralGains.csv" />
  <property name="pixelDelayFile" value="classpath:/default/delays_zero.csv" />

  <service id="calibService" class="fact.calibrationservice.ConstantCalibService" />
  <service id="auxService" class="fact.auxservice.AuxFileService" auxFolder="${auxFolder}" />

  <!-- Name of the stream and url to the input file -->
  <stream id="fact" class="fact.io.hdureader.FITSStream" url="${infile}"/>

  <!-- Description of the process and the corresponding stream -->
  <process id="2" input="fact">
    <include url="classpath:/analysis/init.xml" />
    <include url="classpath:/analysis/calibration.xml" />
    <include url="classpath:/analysis/extraction.xml" />

    <fact.cleaning.TwoLevelTimeNeighbor
        calibService="calibService"
        photonChargeKey="photoncharge"
        outputKey="shower"
        arrivalTimeKey="arrivalTime"
        corePixelThreshold="4.0"
        neighborPixelThreshold="2.0"
        timeLimit="6"
        minNumberOfPixel="2"
    />

    <Skip condition="%{data.shower} == null" />

    <fact.features.muon.CircularFit />
    <fact.features.muon.GaussianFit
      startXKey="circFitX"
      startYKey="circFitY"
      startRKey="circFitR"
      />

    <!--<fact.io.JSONWriter-->
      <!--keys="*R,*X,*Y,*Sigma"-->
      <!--url="file:test.json"-->
      <!--specialDoubleValuesAsString="true"-->
      <!--doubleSignDigits="6"-->
      <!--/>-->
  </process>
</container>
