<container>

    <properties url="classpath:/default/settings.properties" />


    <!-- Pathes to the input files -->
    <!--<property name="num_copies" value="4" />-->

    <property name="infolder" value="file:/home/lena/Dokumente/Masterarbeit/FACT_Data/MC/Proton/" />
    <property name="outfolder" value="file:/home/lena/Dokumente/Masterarbeit/FellWalker/Separation/" />
    <property name="filename" value="proton" />



    <!--    <property name="drsfile" value="classpath:/testMcDrsFile.drs.fits.gz" />-->
    <property name="integralGainFile" value="classpath:/default/defaultIntegralGains.csv" />
    <property name="drsfile" value="classpath:/testMcDrsFile.drs.fits.gz" />
    <!--<property name="integralGainFile" value="classpath:/default/gain_sorted_20131127.csv" />-->

    <service id="auxService" class="fact.auxservice.AuxFileService" auxFolder="file:src/main/resources/aux/" />


    <stream id="fact" class="fact.io.RecursiveDirectoryStream"
            pattern="**/*_Events.fits.gz"  url="${infolder}">
        <stream class="fact.io.FitsStream" id="_" />
    </stream>


    <!-- Description of the process and the corresponding stream -->
    <process id="2" input="fact" >

        <include url="classpath:/default/data/prevEventAndSkip.xml" />
        <include url="classpath:/default/data/calibration.xml" />

        <fact.extraction.BasicExtraction
                dataKey="DataCalibrated"
                outputKeyMaxAmplPos="maxPos"
                outputKeyPhotonCharge="photoncharge"
                url="${integralGainFile}"
                startSearchWindow="${basicExtraction_startSearchWindow}"
                rangeSearchWindow="${basicExtraction_rangeSearchWindow}"
                rangeHalfHeightWindow="${basicExtraction_rangeHalfHeigthWindow}"/>

        <fact.extraction.RisingEdgeForPositions
                dataKey="DataCalibrated"
                outputKey="ArrtimePos"
                amplitudePositionsKey="maxPos"
                maxSlopesKey="maxSlope"/>


        <fact.cleaning.MotionCleaning
                threshold = "30"
                outputKey = "shower"/>

        <Skip condition="%{data.numShowerPixel} &lt; 15 "/>


        <fact.features.DistributionFromShower
                weightsKey="photoncharge"
                showerKey="shower"
                sizeKey="Size"
                outputKey="showerDistribution"
        />



        <fact.hexmap.ClusterFellwalker />




        <Skip condition="%{data.NumCluster} == 0" />

        <fact.io.JSONWriter keys="EventNum,MCorsikaEvtHeader.fTotalEnergy,numShowerPixel,numCluster,boundRatio,idealBoundDiff,boundAngleSum,distanceCenterSum,neighborCluster,chargeMax,maxClusterNumPixel,numClusterPixel,stdNumPixel,convexity" url="${outfolder}${filename}.json"/>

    </process>


</container>
