package fact.features;

import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;


public class CalculateDrs4TimeCalibrationConstantsTest {

    private CalculateDrs4TimeCalibrationConstants test_me;

    @Before
    public void setup() {
        test_me = new CalculateDrs4TimeCalibrationConstants();
        test_me.key  = "test";
        test_me.outputKey = "test_output";
    }


    @Test
    public void maximum() {
        // mock_data created using a small python script:
        // 1024 doubles with rising zero crossings at positions:
        //
        double[] mock_data = {
                -36.62, 94.73, 121.09, 71.78, 2.44, -72.75, -120.61, -81.05, 16.60, 107.42, 120.12, 46.87, -61.04, -120.61, -108.89, -36.13,
                12.21, 66.41, 120.61, 82.52, -12.21, -68.85, -115.23, -120.12, -70.31, 7.81, 28.81, 49.80, 70.80, -17.58, -100.59, -115.72,
                -22.95, 47.85, 118.65, 97.66, 43.95, -53.22, -105.47, -110.84, -26.86, 63.48, 109.37, 121.58, 107.91, 44.92, -57.62, -120.61,
                -82.03, -19.53, 15.30, 50.13, 84.96, 4.88, -54.69, -121.58, -89.84, -46.87, 6.51, 59.90, 113.28, 54.20, -6.35, -106.45,
                -118.65, -100.10, -31.74, -3.42, 31.25, 65.92, 100.59, 7.81, -76.66, -114.75, -50.29, 3.91, 58.11, 112.30, 63.48, -52.73,
                -119.14, -78.12, -3.42, 68.85, 118.65, 103.03, 30.27, -20.02, -97.17, -120.12, -61.04, 22.95, 100.10, 112.30, 17.58, -73.73,
                -120.61, -96.68, -24.09, 48.50, 121.09, 48.34, -31.25, -91.80, -121.58, -45.90, 27.83, 101.56, 113.28, 43.95, -54.69, -99.61,
                -121.58, -92.29, -22.30, 47.69, 117.68, 118.65, 48.83, -34.18, -114.26, -111.82, -31.74, 42.48, 115.72, 113.77, 64.94, -48.34,
                -99.61, -119.63, -60.55, -5.37, 49.80, 104.98, 44.92, -78.61, -119.14, -61.04, -0.49, 60.06, 120.61, 105.96, 27.83, -92.77,
                -118.65, -88.87, 0.00, 92.29, 121.09, 86.91, 8.30, -82.03, -119.63, -73.24, -15.46, 42.32, 100.10, 11.72, -98.14, -121.58,
                -103.03, -5.37, 95.70, 121.58, 101.07, 9.77, -99.61, -121.58, -93.26, -21.65, 49.97, 121.58, 93.75, 17.58, -90.33, -119.63,
                -66.89, -19.04, -1.30, 16.44, 34.18, -87.89, -120.61, -65.43, 8.30, 72.27, 115.23, 119.63, 72.27, 13.67, -98.63, -97.66,
                -70.31, -12.21, 20.51, 53.22, 85.94, 3.42, -90.33, -121.58, -79.59, -28.97, 21.65, 72.27, -24.90, -107.91, -121.58, -91.31,
                -30.27, -0.81, 28.65, 58.11, -25.39, -94.73, -121.58, -92.77, -23.76, 45.25, 114.26, 31.74, -52.73, -109.37, -106.45, -42.97,
                11.23, 65.92, 120.61, 59.57, -31.25, -97.66, -116.21, -91.31, -20.35, 50.62, 121.58, 85.45, -18.55, -100.59, -121.58, -74.71,
                -37.11, 15.46, 68.03, 120.61, 79.10, -25.39, -100.10, -121.09, -90.33, -23.27, 43.78, 110.84, 18.07, -69.82, -93.75, -121.58,
                -104.49, -26.37, 46.14, 118.65, 89.36, 35.16, -69.34, -113.77, -117.19, -82.52, 10.74, 112.30, 117.19, 66.41, -36.62, -97.66,
                -120.12, -77.15, -9.77, 52.73, 120.61, 98.63, 37.60, -76.66, -121.09, -109.37, -63.48, -2.12, 59.24, 120.61, 94.24, 44.92,
                -42.97, -116.70, -112.30, -39.55, 33.20, 105.96, 51.27, -47.36, -108.40, -116.21, -45.90, 22.46, 90.82, 110.84, 58.59, -32.23,
                -113.28, -109.86, -35.64, 38.33, 112.30, 107.91, 13.67, -72.75, -121.09, -42.97, 3.58, 50.13, 96.68, -12.21, -91.31, -119.14,
                -87.40, -17.74, 51.92, 121.58, 89.84, -3.91, -90.33, -121.09, -96.19, -24.25, 47.69, 119.63, 108.89, 18.55, -69.82, -119.63,
                -86.43, -17.74, 50.94, 119.63, 93.26, 40.04, -59.57, -115.72, -94.24, -7.32, 83.01, 120.12, 81.54, 27.34, -77.15, -118.16,
                -98.63, -38.57, 14.16, 66.89, 119.63, 81.05, -16.60, -95.70, -118.65, -81.54, -11.72, 52.25, 104.98, 118.65, 68.85, -30.76,
                -114.26, -104.98, -36.62, 35.64, 119.14, 95.70, 74.71, -17.58, -108.40, -119.14, -58.11, 29.79, 107.91, 117.19, 50.78, -41.50,
                -114.26, -115.23, -44.43, 37.60, 82.03, 121.58, 87.89, 24.90, -88.38, -121.58, -82.03, -3.91, 19.04, 41.99, 64.94, -10.25,
                -71.29, -120.61, -74.22, -9.93, 54.36, 118.65, 58.59, -48.83, -115.72, -113.28, -40.04, 24.41, 79.59, 121.09, 83.98, 49.32,
                -48.83, -109.37, -120.61, -70.31, 17.09, 98.14, 117.19, 50.29, -64.45, -121.58, -99.12, -21.97, 24.41, 71.78, 119.14, 110.35,
                46.87, -53.22, -110.35, -86.91, -1.46, 54.69, 41.02, 27.34, 13.67, -87.40, -121.09, -71.78, -19.37, 33.04, 85.45, 9.77,
                -90.82, -118.16, -52.25, -3.74, 44.76, 93.26, 35.64, -27.83, -107.91, -99.12, -17.09, 69.34, 116.70, 91.31, 39.55, -38.57,
                -120.12, -102.05, -26.37, 44.92, 116.21, 46.39, -74.22, -106.93, -121.09, -76.17, -9.28, 66.89, 113.28, 110.35, 57.62, -57.13,
                -117.19, -87.89, -37.11, 10.25, 29.13, 48.01, 66.89, -42.48, -104.98, -108.89, -43.95, 1.95, 47.85, 93.75, 7.81, -82.52,
                -113.77, -53.71, 3.58, 60.87, 118.16, 33.69, -89.84, -120.61, -102.54, -65.43, -3.09, 59.24, 121.58, 96.68, 33.20, -49.32,
                -112.30, -109.86, -37.11, 23.44, 83.98, 120.12, 80.57, -31.25, -119.14, -111.82, -60.55, 24.90, 112.30, 114.26, 47.36, -42.97,
                -110.35, -119.14, -54.69, -35.16, 15.62, 66.41, 117.19, 41.02, -39.55, -116.70, -108.89, -32.23, 8.14, 48.50, 88.87, 27.83,
                -43.46, -98.63, -120.61, -112.79, -21.48, 64.45, 121.09, 94.73, -29.30, -107.91, -115.72, -42.48, 30.76, 104.00, 121.58, 101.56,
                27.34, -68.85, -121.58, -112.79, -26.37, 47.36, 121.09, 89.84, -31.25, -93.75, -121.09, -74.22, 4.88, 87.89, 121.09, 112.79,
                34.18, -55.66, -120.61, -102.54, -43.46, 24.90, 84.47, 121.58, 80.08, -13.67, -80.57, -104.00, -111.33, -16.60, 41.50, 71.29,
                101.07, -39.06, -114.75, -112.79, -18.55, 74.22, 121.09, 93.26, 13.67, -87.40, -120.12, -62.01, -2.12, 57.78, 117.68, 43.46,
                -22.95, -116.70, -97.66, -21.00, 49.32, 119.63, 115.72, 35.64, -76.17, -121.58, -93.26, -58.59, 14.65, 88.87, 121.58, 50.29,
                -30.76, -94.73, -116.70, -59.57, 0.98, 61.28, 121.58, 87.89, 26.86, -72.27, -121.58, -86.91, -21.32, 44.27, 109.86, 4.88,
                -71.29, -121.58, -73.73, -8.63, 56.48, 121.58, 67.87, -33.69, -95.70, -119.14, -84.96, -47.85, -0.65, 46.55, 93.75, -23.93,
                -118.16, -99.12, -34.67, 33.69, 102.05, 119.14, 68.36, -26.86, -114.75, -121.58, -69.34, 8.79, 32.55, 56.32, 80.08, -28.81,
                -94.24, -119.14, -77.64, 0.00, 9.77, 19.53, 29.30, -62.50, -121.58, -77.64, -11.39, 54.85, 121.09, 93.75, 26.86, -22.95,
                -99.12, -119.63, -75.68, -8.30, 59.08, 113.77, 94.24, 7.81, -47.36, -117.68, -109.86, -32.71, 44.43, 121.58, 77.64, -18.07,
                -99.12, -120.12, -73.24, 3.42, 82.52, 117.19, 111.33, 58.11, -24.41, -95.70, -121.09, -68.36, 15.14, 97.66, 119.14, 72.75,
                -14.16, -101.07, -120.61, -86.91, -45.41, -3.91, 92.29, 120.12, 84.47, 21.00, -65.92, -121.58, -103.52, -50.29, -6.18, 37.92,
                82.03, -38.57, -112.79, -106.93, -8.79, 89.36, 121.09, 82.52, 6.35, -65.92, -119.63, -101.07, -1.95, 89.36, 121.58, 90.33,
                19.53, -64.94, -121.58, -75.68, 4.88, 84.47, 120.61, 99.12, 53.71, -53.22, -112.79, -104.49, -6.35, 86.91, 119.63, 113.77,
                31.25, -77.64, -113.77, -118.16, -39.06, -3.58, 31.90, 67.38, -45.41, -111.33, -117.19, -85.94, -61.52, -6.18, 49.15, 104.49,
                3.91, -54.20, -121.58, -78.12, -14.32, 49.48, 113.28, 27.34, -71.29, -115.23, -104.98, -24.41, 54.69, 101.56, 121.58, 94.73,
                -14.16, -110.84, -94.24, 0.00, 59.08, 110.84, 120.61, 78.12, -42.97, -109.37, -118.16, -50.78, 1.46, 53.71, 105.96, 51.76,
                -30.76, -113.28, -109.86, -61.04, -5.21, 50.62, 106.45, 35.16, -39.55, -109.37, -114.75, -46.39, 9.11, 64.62, 120.12, 45.90,
                -42.48, -119.14, -95.70, -23.27, 49.15, 121.58, 84.96, -30.27, -120.12, -68.36, -9.11, 50.13, 109.37, 51.76, -20.51, -107.42,
                -103.52, -25.39, 47.12, 119.63, 105.47, 27.34, -93.26, -119.63, -56.15, -2.44, 51.27, 104.98, -12.21, -93.26, -121.09, -77.15,
                -12.37, 52.41, 117.19, 19.04, -56.15, -96.19, -112.79, -40.04, 5.05, 50.13, 95.21, 7.81, -46.39, -111.82, -112.30, -69.34,
                5.37, 88.38, 121.09, 80.57, -40.53, -116.70, -96.68, -55.66, 27.83, 106.45, 119.14, 62.01, -17.09, -84.47, -121.58, -86.43,
                -7.32, 80.08, 121.09, 64.45, -46.39, -117.19, -104.49, -36.62, 42.24, 121.09, 62.01, -16.60, -74.22, -113.77, -113.28, -72.27,
                -8.14, 55.99, 120.12, 35.16, -50.78, -110.35, -76.66, -11.07, 54.52, 120.12, 43.95, -74.71, -101.56, -119.14, -59.57, 0.33,
                60.22, 120.12, 31.25, -83.98, -119.14, -96.19, -29.79, 34.42, 98.63, 114.26, 42.48, -74.22, -114.75, -111.33, -64.94, -15.46,
                34.02, 83.50, -24.41, -66.41, -121.09, -91.80, -21.32, 49.15, 119.63, 70.80, -48.34, -107.42, -114.75, -70.31, -16.11, 38.09,
                92.29, 28.81, -55.18, -115.23, -111.82, -36.13, 25.39, 84.47, 119.63, 86.43, 26.86, -68.85, -121.58, -106.45, -73.24, -25.88,
                13.67, 53.22, 92.77, 33.69, -59.57, -102.05, -116.70, -56.64, 35.64, 119.14, 113.77, 73.24, -26.86, -114.26, -118.16, -83.01,
                0.00, 24.41, 48.83, 73.24, -63.96, -117.68, -111.33, 6.35, 65.92, 121.58, 67.38, 12.70, -87.89, -116.70, -66.41, -30.76,
                43.46, 121.58, 105.96, 9.28, -52.25, -109.86, -120.12, -72.75, -7.98, 56.80, 121.58, 83.01, 0.98, -77.64, -119.14, -110.35,
        };

        short mock_startcell = 442;
        double[] rising_zero_crossings = {
                0.2788, 7.8300, 15.7475, 24.9000, 32.3241, 40.2973, 49.5607, 57.8780, 67.0986, 74.9279, 82.0473,
                90.7267, 98.3318, 105.6225, 114.3186, 122.4276, 131.0973, 138.0081, 146.0000, 154.2676, 161.0531,
                169.3023, 178.0734, 183.8874, 193.3731, 201.5723, 209.0276, 216.3443, 223.7928, 232.2867, 240.7059,
                249.3471, 257.3636, 265.8848, 274.1563, 283.0345, 291.5436, 298.6714, 306.4818, 313.9231, 321.2547,
                329.3371, 337.2583, 345.0811, 353.7315, 362.1832, 370.5068, 378.6611, 386.5417, 395.1702, 403.1544,
                410.6212, 419.8045, 427.4737, 436.0261, 444.3696, 451.0772, 458.1977, 466.3699, 474.1218, 482.7835,
                490.9574, 497.9375, 506.0496, 514.6129, 522.7086, 531.6923, 539.7984, 548.2500, 555.5800, 564.3576,
                571.9383, 580.6357, 589.2857, 596.2000, 604.0353, 611.2986, 619.8000, 627.9839, 636.3251, 643.1325,
                652.0138, 658.5071, 666.8875, 675.0000, 682.1720, 691.1232, 699.4241, 706.9554, 715.8187, 725.0406,
                734.1402, 740.0896, 748.0214, 755.9394, 764.0681, 773.1009, 781.1118, 788.2245, 795.3086, 803.0000,
                811.9720, 820.0933, 827.8358, 835.3213, 842.1538, 849.3502, 857.0455, 864.1910, 871.8881, 879.9281,
                887.6667, 896.0838, 903.4644, 912.1269, 919.1687, 926.9946, 934.4639, 943.3125, 950.3025, 958.2973,
                965.5873, 975.6543, 983.6138, 992.0000, 998.9461, 1007.4145, 1016.1231
        };

        // Test 1: calculate zero crossings
        // --------------------------------
        // lzc : list of zero crossings
        ArrayList<Double> lzc = test_me.find_zero_crossings(mock_data, 0, 1024);

        // Loop over *lzc* and *rising_zero_crossings* and assert length is equal
        // and each element is equal.
        assertTrue("Number of zero_crossings should be 128 ", lzc.size() == 128);
        for (int i = 0; i < 128; i++) {
            assertEquals("Position of zero crossing " + i + " should be at " + rising_zero_crossings[i],
                    lzc.get(i),
                    rising_zero_crossings[i],
                    1e-3);
        }


        // Test 2: calculate wi and wli:
        // --------------------------------
        test_me.calculate_wi_wli(lzc, 0, mock_startcell);
        // wi should be equal to 1. almost everywhere,
        // except in these slices
        // int[] wi_not_one_indices = {434,  435,  436,  437,  438,  439,  440,  441,  442};
        // In these slices the values are
        double[] wi_not_one_values = {0.123, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.721};
        for (int i = 0; i < 1024; i++) {
            if (i < 434 || i > 442) {
                assertTrue("The array wi should be 1. at i=" + i + ", but is:" + test_me.wi[i], test_me.wi[i] == 1.);
            } else {
                assertTrue("The array wi should be " + wi_not_one_values[i - 434] + " at i=" + i + ", but is:" + test_me.wi[i], Math.abs(test_me.wi[i] - wi_not_one_values[i - 434]) < 1e-3);
            }
        }


        // wli has values around 8, where wi is equal to 1.
        // the true values I got in Python where:
        double[] wli_values = {
                8.650, 8.650, 8.650, 8.650, 8.650, 8.650, 8.650, 7.410, 6.914, 6.914, 6.914, 6.914, 6.914, 6.914, 7.651, 7.835,
                7.835, 7.835, 7.835, 7.835, 7.835, 7.835, 7.283, 7.263, 7.263, 7.263, 7.263, 7.263, 7.263, 8.132, 8.501, 8.501,
                8.501, 8.501, 8.501, 8.501, 8.501, 8.438, 8.184, 8.184, 8.184, 8.184, 8.184, 8.184, 8.184, 8.186, 8.341, 8.341,
                8.341, 8.341, 8.341, 8.341, 8.341, 8.341, 7.306, 6.807, 6.807, 6.807, 6.807, 6.807, 6.807, 8.607, 8.881, 8.881,
                8.881, 8.881, 8.881, 8.881, 8.881, 8.881, 6.526, 6.493, 6.493, 6.493, 6.493, 6.493, 7.423, 8.380, 8.380, 8.380,
                8.380, 8.380, 8.380, 8.380, 8.350, 8.112, 8.112, 8.112, 8.112, 8.112, 8.112, 8.112, 8.112, 7.172, 7.172, 7.172,
                7.172, 7.172, 7.172, 7.172, 8.645, 8.951, 8.951, 8.951, 8.951, 8.951, 8.951, 8.951, 8.951, 8.381, 8.301, 8.301,
                8.301, 8.301, 8.301, 8.301, 8.301, 7.858, 7.531, 7.531, 7.531, 7.531, 7.531, 7.531, 7.591, 8.863, 8.863, 8.863,
                8.863, 8.863, 8.863, 8.863, 8.863, 8.928, 9.222, 9.222, 9.222, 9.222, 9.222, 9.222, 9.222, 9.222, 9.222, 9.105,
                9.100, 9.100, 9.100, 9.100, 9.100, 9.100, 9.100, 9.100, 6.391, 5.949, 5.949, 5.949, 5.949, 5.949, 7.754, 7.932,
                7.932, 7.932, 7.932, 7.932, 7.932, 7.932, 7.918, 7.918, 7.918, 7.918, 7.918, 7.918, 7.918, 7.931, 8.129, 8.129,
                8.129, 8.129, 8.129, 8.129, 8.129, 8.129, 8.971, 9.033, 9.033, 9.033, 9.033, 9.033, 9.033, 9.033, 9.033, 8.114,
                8.011, 8.011, 8.011, 8.011, 8.011, 8.011, 8.011, 7.213, 7.113, 7.113, 7.113, 7.113, 7.113, 7.113, 7.091, 7.084,
                7.084, 7.084, 7.084, 7.084, 7.084, 7.504, 7.691, 7.691, 7.691, 7.691, 7.691, 7.691, 7.691, 8.972, 8.972, 8.972,
                8.972, 8.972, 8.972, 8.972, 8.972, 8.948, 8.121, 8.121, 8.121, 8.121, 8.121, 8.121, 8.121, 8.121, 7.778, 7.742,
                7.742, 7.742, 7.742, 7.742, 7.742, 7.700, 7.486, 7.486, 7.486, 7.486, 7.486, 7.486, 7.486, 7.042, 6.832, 6.832,
                6.832, 6.832, 6.832, 6.832, 7.140, 7.196, 7.196, 7.196, 7.196, 7.196, 7.196, 7.521, 7.695, 7.695, 7.695, 7.695,
                7.695, 7.695, 7.695, 7.170, 7.146, 7.146, 7.146, 7.146, 7.146, 7.146, 7.592, 7.697, 7.697, 7.697, 7.697, 7.697,
                7.697, 7.736, 8.040, 8.040, 8.040, 8.040, 8.040, 8.040, 8.040, 8.018, 7.739, 7.739, 7.739, 7.739, 7.739, 7.739,
                7.739, 7.965, 8.417, 8.417, 8.417, 8.417, 8.417, 8.417, 8.417, 8.417, 7.467, 7.381, 7.381, 7.381, 7.381, 7.381,
                7.381, 8.067, 8.663, 8.663, 8.663, 8.663, 8.663, 8.663, 8.663, 8.663, 7.248, 7.042, 7.042, 7.042, 7.042, 7.042,
                7.042, 7.694, 7.826, 7.826, 7.826, 7.826, 7.826, 7.826, 7.824, 7.469, 7.469, 7.469, 7.469, 7.469, 7.469, 7.469,
                8.209, 8.849, 8.849, 8.849, 8.849, 8.849, 8.849, 8.849, 8.849, 7.571, 6.990, 6.990, 6.990, 6.990, 6.990, 6.990,
                7.691, 7.995, 7.995, 7.995, 7.995, 7.995, 7.995, 7.995, 7.500, 7.290, 7.290, 7.290, 7.290, 7.290, 7.290, 8.436,
                10.067, 10.067, 10.067, 10.067, 10.067, 10.067, 10.067, 10.067, 10.067, 9.338, 7.959, 7.959, 7.959, 7.959, 7.959, 7.959,
                7.959, 8.124, 8.386, 8.386, 8.386, 8.386, 8.386, 8.386, 8.386, 8.386, 6.946, 6.946, 6.946, 6.946, 6.946, 6.946,
                7.028, 8.468, 8.468, 8.468, 8.468, 8.468, 8.468, 8.468, 8.468, 8.609, 8.709, 8.709, 8.709, 8.709, 8.709, 8.709,
                8.709, 8.709, 1.072, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 5.446, 7.551, 7.551, 7.551, 7.551, 7.551,
                7.551, 7.613, 7.917, 7.917, 7.917, 7.917, 7.917, 7.917, 7.917, 8.229, 9.153, 9.153, 9.153, 9.153, 9.153, 9.153,
                9.153, 9.153, 8.980, 7.424, 7.424, 7.424, 7.424, 7.424, 7.424, 7.424, 7.795, 7.973, 7.973, 7.973, 7.973, 7.973,
                7.973, 7.973, 8.880, 9.263, 9.263, 9.263, 9.263, 9.263, 9.263, 9.263, 9.263, 8.848, 8.317, 8.317, 8.317, 8.317,
                8.317, 8.317, 8.317, 8.427, 9.221, 9.221, 9.221, 9.221, 9.221, 9.221, 9.221, 9.221, 9.221, 7.966, 7.829, 7.829,
                7.829, 7.829, 7.829, 7.829, 7.778, 7.119, 7.119, 7.119, 7.119, 7.119, 7.119, 7.119, 8.606, 8.679, 8.679, 8.679,
                8.679, 8.679, 8.679, 8.679, 8.386, 7.605, 7.605, 7.605, 7.605, 7.605, 7.605, 7.605, 7.395, 7.291, 7.291, 7.291,
                7.291, 7.291, 7.291, 7.821, 8.696, 8.696, 8.696, 8.696, 8.696, 8.696, 8.696, 8.696, 8.296, 8.109, 8.109, 8.109,
                8.109, 8.109, 8.109, 8.109, 8.430, 8.670, 8.670, 8.670, 8.670, 8.670, 8.670, 8.670, 8.670, 7.082, 6.911, 6.911,
                6.911, 6.911, 6.911, 6.911, 7.983, 7.992, 7.992, 7.992, 7.992, 7.992, 7.992, 7.992, 8.268, 8.268, 8.268, 8.268,
                8.268, 8.268, 8.268, 8.268, 7.182, 6.786, 6.786, 6.786, 6.786, 6.786, 6.786, 8.171, 8.249, 8.249, 8.249, 8.249,
                8.249, 8.249, 8.249, 8.613, 8.771, 8.771, 8.771, 8.771, 8.771, 8.771, 8.771, 8.771, 6.031, 5.814, 5.814, 5.814,
                5.814, 6.227, 9.486, 9.486, 9.486, 9.486, 9.486, 9.486, 9.486, 9.486, 9.486, 8.679, 8.199, 8.199, 8.199, 8.199,
                8.199, 8.199, 8.199, 7.881, 7.455, 7.455, 7.455, 7.455, 7.455, 7.455, 7.455, 7.321, 7.317, 7.317, 7.317, 7.317,
                7.317, 7.317, 7.403, 7.448, 7.448, 7.448, 7.448, 7.448, 7.448, 7.665, 8.494, 8.494, 8.494, 8.494, 8.494, 8.494,
                8.494, 8.494, 8.441, 8.419, 8.419, 8.419, 8.419, 8.419, 8.419, 8.419, 8.484, 8.641, 8.641, 8.641, 8.641, 8.641,
                8.641, 8.641, 8.641, 8.233, 8.017, 8.017, 8.017, 8.017, 8.017, 8.017, 8.017, 8.338, 8.521, 8.521, 8.521, 8.521,
                8.521, 8.521, 8.521, 8.492, 8.271, 8.271, 8.271, 8.271, 8.271, 8.271, 8.271, 8.271, 8.783, 8.878, 8.878, 8.878,
                8.878, 8.878, 8.878, 8.878, 8.878, 8.522, 8.509, 8.509, 8.509, 8.509, 8.509, 8.509, 8.509, 7.879, 7.128, 7.128,
                7.128, 7.128, 7.128, 7.128, 7.352, 7.810, 7.810, 7.810, 7.810, 7.810, 7.810, 7.810, 7.619, 7.441, 7.441, 7.441,
                7.441, 7.441, 7.441, 7.433, 7.332, 7.332, 7.332, 7.332, 7.332, 7.332, 7.332, 7.891, 8.082, 8.082, 8.082, 8.082,
                8.082, 8.082, 8.082, 7.976, 7.921, 7.921, 7.921, 7.921, 7.921, 7.921, 7.921, 7.848, 7.823, 7.823, 7.823, 7.823,
                7.823, 7.823, 7.823, 8.583, 8.650, 8.650, 8.650, 8.650, 8.650, 8.650, 8.650, 8.597, 8.452, 8.452, 8.452, 8.452,
                8.452, 8.452, 8.452, 8.452, 8.347, 8.324, 8.324, 8.324, 8.324, 8.324, 8.324, 8.324, 8.240, 8.154, 8.154, 8.154,
                8.154, 8.154, 8.154, 8.154, 8.062, 7.881, 7.881, 7.881, 7.881, 7.881, 7.881, 7.881, 8.223, 8.629, 8.629, 8.629,
                8.629, 8.629, 8.629, 8.629, 8.629, 8.094, 7.984, 7.984, 7.984, 7.984, 7.984, 7.984, 7.984, 7.547, 7.467, 7.467,
                7.467, 7.467, 7.467, 7.467, 8.117, 9.183, 9.183, 9.183, 9.183, 9.183, 9.183, 9.183, 9.183, 8.887, 7.669, 7.669,
                7.669, 7.669, 7.669, 7.669, 7.669, 8.134, 8.552, 8.552, 8.552, 8.552, 8.552, 8.552, 8.552, 8.552, 8.349, 8.343,
                8.343, 8.343, 8.343, 8.343, 8.343, 8.343, 7.312, 6.708, 6.708, 6.708, 6.708, 6.708, 6.708, 7.089, 7.121, 7.121,
                7.121, 7.121, 7.121, 7.121, 7.964, 8.172, 8.172, 8.172, 8.172, 8.172, 8.172, 8.172, 7.907, 7.752, 7.752, 7.752,
                7.752, 7.752, 7.752, 7.752, 8.551, 8.662, 8.662, 8.662, 8.662, 8.662, 8.662, 8.662, 8.556, 8.174, 8.174, 8.174,
                8.174, 8.174, 8.174, 8.174, 8.123, 6.980, 6.980, 6.980, 6.980, 6.980, 6.980, 7.051, 8.112, 8.112, 8.112, 8.112,
                8.112, 8.112, 8.112, 8.112, 8.541, 8.563, 8.563, 8.563, 8.563, 8.563, 8.563, 8.563, 8.382, 8.096, 8.096, 8.096,
                8.096, 8.096, 8.096, 8.096, 8.354, 8.984, 8.984, 8.984, 8.984, 8.984, 8.984, 8.984, 8.984, 8.714, 8.106, 8.106,
                8.106, 8.106, 8.106, 8.106, 8.106, 8.176, 8.452, 8.452, 8.452, 8.452, 8.452, 8.452, 8.452, 8.452, 7.610, 7.330,
                7.330, 7.330, 7.330, 7.330, 7.330, 7.938, 8.778, 8.778, 8.778, 8.778, 8.778, 8.778, 8.778, 8.778, 8.009, 7.581,
                7.581, 7.581, 7.581, 7.581, 7.581, 7.650, 8.697, 8.697, 8.697, 8.697, 8.697, 8.697, 8.697, 8.697, 8.680, 8.650};
        // Loop over wi and wli and assert equality of these values.
        for (int i = 0; i < 1024; i++) {
            assertTrue("The array wli should be " + wli_values[i] + " at i=" + i + ", but is:" + test_me.wli[i], Math.abs(test_me.wli[i] - wli_values[i]) < 1e-3);
        }


        // Test 3: calculate s_n and the time offsets o_n
        // ----------------------------------------------
        test_me.calculate_s_n_and_time_offsets(0);

        double[] sn_values = {
                8.650, 8.650, 8.650, 8.650, 8.650, 8.650, 8.650, 8.495, 8.319, 8.179, 8.064, 7.968, 7.887, 7.818, 7.806, 7.808,
                7.810, 7.811, 7.813, 7.814, 7.815, 7.816, 7.793, 7.770, 7.750, 7.731, 7.714, 7.698, 7.683, 7.698, 7.724, 7.748,
                7.771, 7.792, 7.813, 7.832, 7.850, 7.865, 7.874, 7.881, 7.889, 7.896, 7.902, 7.909, 7.915, 7.921, 7.930, 7.938,
                7.947, 7.955, 7.962, 7.969, 7.976, 7.983, 7.971, 7.950, 7.930, 7.911, 7.892, 7.874, 7.856, 7.868, 7.885, 7.900,
                7.915, 7.930, 7.944, 7.958, 7.971, 7.984, 7.964, 7.943, 7.923, 7.904, 7.885, 7.867, 7.861, 7.868, 7.874, 7.881,
                7.887, 7.893, 7.899, 7.904, 7.910, 7.912, 7.914, 7.917, 7.919, 7.921, 7.923, 7.925, 7.927, 7.919, 7.911, 7.904,
                7.896, 7.889, 7.881, 7.874, 7.882, 7.892, 7.903, 7.913, 7.923, 7.932, 7.942, 7.951, 7.960, 7.964, 7.967, 7.970,
                7.973, 7.976, 7.979, 7.982, 7.984, 7.983, 7.980, 7.976, 7.972, 7.968, 7.965, 7.961, 7.958, 7.966, 7.973, 7.980,
                7.987, 7.993, 8.000, 8.006, 8.013, 8.020, 8.029, 8.037, 8.046, 8.055, 8.063, 8.071, 8.079, 8.087, 8.095, 8.102,
                8.109, 8.116, 8.123, 8.129, 8.136, 8.142, 8.149, 8.155, 8.143, 8.129, 8.115, 8.101, 8.087, 8.074, 8.072, 8.071,
                8.070, 8.069, 8.068, 8.068, 8.067, 8.066, 8.065, 8.064, 8.063, 8.063, 8.062, 8.061, 8.060, 8.059, 8.060, 8.060,
                8.060, 8.061, 8.061, 8.062, 8.062, 8.062, 8.067, 8.073, 8.078, 8.083, 8.088, 8.093, 8.098, 8.103, 8.108, 8.108,
                8.107, 8.107, 8.106, 8.106, 8.105, 8.105, 8.104, 8.100, 8.095, 8.090, 8.085, 8.081, 8.076, 8.071, 8.066, 8.062,
                8.057, 8.052, 8.048, 8.043, 8.039, 8.036, 8.035, 8.033, 8.031, 8.030, 8.028, 8.027, 8.025, 8.030, 8.034, 8.038,
                8.042, 8.046, 8.050, 8.054, 8.058, 8.062, 8.063, 8.063, 8.063, 8.063, 8.064, 8.064, 8.064, 8.064, 8.063, 8.062,
                8.060, 8.059, 8.058, 8.056, 8.055, 8.054, 8.051, 8.049, 8.047, 8.045, 8.042, 8.040, 8.038, 8.034, 8.029, 8.025,
                8.020, 8.015, 8.011, 8.006, 8.003, 8.000, 7.997, 7.994, 7.991, 7.988, 7.985, 7.983, 7.982, 7.981, 7.980, 7.979,
                7.978, 7.977, 7.976, 7.973, 7.970, 7.967, 7.964, 7.961, 7.958, 7.955, 7.954, 7.953, 7.952, 7.951, 7.950, 7.950,
                7.949, 7.948, 7.948, 7.949, 7.949, 7.949, 7.950, 7.950, 7.950, 7.950, 7.950, 7.949, 7.948, 7.948, 7.947, 7.946,
                7.946, 7.946, 7.947, 7.949, 7.950, 7.952, 7.953, 7.955, 7.956, 7.958, 7.956, 7.954, 7.952, 7.951, 7.949, 7.947,
                7.945, 7.946, 7.948, 7.950, 7.952, 7.954, 7.957, 7.959, 7.961, 7.963, 7.961, 7.958, 7.955, 7.953, 7.950, 7.947,
                7.945, 7.944, 7.943, 7.943, 7.943, 7.942, 7.942, 7.942, 7.941, 7.940, 7.939, 7.937, 7.936, 7.935, 7.933, 7.932,
                7.933, 7.935, 7.938, 7.941, 7.943, 7.946, 7.948, 7.951, 7.953, 7.952, 7.949, 7.947, 7.944, 7.942, 7.939, 7.936,
                7.936, 7.936, 7.936, 7.936, 7.936, 7.936, 7.937, 7.937, 7.936, 7.934, 7.932, 7.931, 7.929, 7.927, 7.925, 7.927,
                7.932, 7.938, 7.943, 7.949, 7.954, 7.960, 7.965, 7.971, 7.976, 7.979, 7.979, 7.979, 7.979, 7.979, 7.979, 7.979,
                7.979, 7.979, 7.980, 7.981, 7.982, 7.983, 7.984, 7.985, 7.986, 7.987, 7.985, 7.982, 7.980, 7.977, 7.975, 7.972,
                7.970, 7.971, 7.972, 7.974, 7.975, 7.976, 7.977, 7.978, 7.979, 7.981, 7.983, 7.984, 7.986, 7.988, 7.989, 7.991,
                7.993, 7.994, 7.994, 7.994, 7.994, 7.994, 7.994, 7.994, 7.994, 7.994, 7.994, 7.993, 7.992, 7.991, 7.990, 7.989,
                7.988, 7.987, 7.987, 7.987, 7.986, 7.986, 7.986, 7.986, 7.986, 7.986, 7.989, 7.991, 7.994, 7.997, 7.999, 8.002,
                8.004, 8.007, 8.009, 8.008, 8.006, 8.005, 8.004, 8.003, 8.001, 8.000, 8.000, 8.000, 7.999, 7.999, 7.999, 7.999,
                7.999, 7.999, 8.001, 8.004, 8.006, 8.009, 8.012, 8.014, 8.017, 8.019, 8.022, 8.024, 8.024, 8.025, 8.025, 8.026,
                8.027, 8.027, 8.028, 8.029, 8.031, 8.033, 8.036, 8.038, 8.041, 8.043, 8.045, 8.048, 8.050, 8.050, 8.049, 8.049,
                8.049, 8.048, 8.048, 8.047, 8.047, 8.045, 8.043, 8.041, 8.040, 8.038, 8.036, 8.034, 8.035, 8.037, 8.038, 8.039,
                8.040, 8.041, 8.043, 8.044, 8.045, 8.044, 8.043, 8.042, 8.041, 8.040, 8.040, 8.039, 8.038, 8.036, 8.035, 8.033,
                8.032, 8.031, 8.029, 8.029, 8.030, 8.031, 8.033, 8.034, 8.035, 8.036, 8.037, 8.039, 8.039, 8.039, 8.039, 8.039,
                8.040, 8.040, 8.040, 8.040, 8.041, 8.042, 8.043, 8.044, 8.045, 8.046, 8.047, 8.048, 8.050, 8.048, 8.046, 8.044,
                8.042, 8.040, 8.038, 8.036, 8.036, 8.036, 8.036, 8.036, 8.036, 8.035, 8.035, 8.035, 8.036, 8.036, 8.037, 8.037,
                8.037, 8.038, 8.038, 8.038, 8.037, 8.035, 8.033, 8.031, 8.029, 8.026, 8.024, 8.025, 8.025, 8.025, 8.026, 8.026,
                8.027, 8.027, 8.027, 8.028, 8.029, 8.031, 8.032, 8.033, 8.034, 8.036, 8.037, 8.038, 8.035, 8.031, 8.027, 8.024,
                8.020, 8.017, 8.020, 8.022, 8.024, 8.027, 8.029, 8.031, 8.034, 8.036, 8.038, 8.039, 8.040, 8.040, 8.040, 8.040,
                8.041, 8.041, 8.041, 8.041, 8.040, 8.039, 8.038, 8.037, 8.036, 8.035, 8.035, 8.033, 8.032, 8.031, 8.030, 8.029,
                8.028, 8.027, 8.026, 8.025, 8.024, 8.023, 8.022, 8.022, 8.021, 8.020, 8.021, 8.022, 8.022, 8.023, 8.024, 8.024,
                8.025, 8.026, 8.026, 8.027, 8.028, 8.028, 8.029, 8.029, 8.030, 8.030, 8.031, 8.032, 8.033, 8.034, 8.035, 8.036,
                8.037, 8.037, 8.038, 8.039, 8.039, 8.039, 8.038, 8.038, 8.038, 8.038, 8.038, 8.039, 8.039, 8.040, 8.041, 8.042,
                8.042, 8.043, 8.044, 8.044, 8.045, 8.045, 8.045, 8.046, 8.046, 8.046, 8.047, 8.047, 8.048, 8.049, 8.050, 8.051,
                8.053, 8.054, 8.055, 8.056, 8.057, 8.058, 8.058, 8.059, 8.060, 8.060, 8.061, 8.062, 8.062, 8.062, 8.061, 8.059,
                8.058, 8.057, 8.056, 8.054, 8.053, 8.053, 8.053, 8.052, 8.052, 8.052, 8.051, 8.051, 8.050, 8.050, 8.049, 8.048,
                8.047, 8.046, 8.046, 8.045, 8.044, 8.043, 8.042, 8.041, 8.040, 8.039, 8.038, 8.038, 8.038, 8.038, 8.038, 8.038,
                8.038, 8.038, 8.038, 8.038, 8.038, 8.038, 8.038, 8.038, 8.037, 8.037, 8.037, 8.037, 8.037, 8.036, 8.036, 8.036,
                8.036, 8.035, 8.035, 8.036, 8.036, 8.037, 8.038, 8.039, 8.040, 8.040, 8.041, 8.042, 8.042, 8.043, 8.043, 8.044,
                8.044, 8.045, 8.045, 8.046, 8.046, 8.047, 8.047, 8.047, 8.048, 8.048, 8.048, 8.049, 8.049, 8.049, 8.049, 8.049,
                8.050, 8.050, 8.050, 8.050, 8.050, 8.050, 8.050, 8.049, 8.049, 8.049, 8.049, 8.048, 8.049, 8.049, 8.050, 8.051,
                8.052, 8.052, 8.053, 8.054, 8.054, 8.054, 8.054, 8.054, 8.054, 8.054, 8.054, 8.054, 8.054, 8.053, 8.052, 8.052,
                8.051, 8.050, 8.050, 8.049, 8.049, 8.050, 8.052, 8.053, 8.054, 8.056, 8.057, 8.058, 8.060, 8.061, 8.060, 8.060,
                8.059, 8.059, 8.058, 8.058, 8.057, 8.058, 8.058, 8.059, 8.059, 8.060, 8.060, 8.061, 8.062, 8.062, 8.062, 8.063,
                8.063, 8.063, 8.064, 8.064, 8.064, 8.065, 8.064, 8.062, 8.061, 8.059, 8.058, 8.056, 8.055, 8.054, 8.052, 8.051,
                8.050, 8.049, 8.048, 8.047, 8.047, 8.047, 8.047, 8.048, 8.048, 8.048, 8.048, 8.048, 8.048, 8.048, 8.047, 8.047,
                8.047, 8.046, 8.046, 8.046, 8.046, 8.047, 8.048, 8.048, 8.049, 8.050, 8.050, 8.051, 8.052, 8.052, 8.052, 8.052,
                8.052, 8.052, 8.052, 8.052, 8.053, 8.051, 8.050, 8.049, 8.048, 8.047, 8.046, 8.045, 8.045, 8.045, 8.045, 8.045,
                8.045, 8.045, 8.045, 8.045, 8.046, 8.046, 8.047, 8.047, 8.048, 8.048, 8.049, 8.049, 8.050, 8.050, 8.050, 8.050,
                8.050, 8.050, 8.050, 8.050, 8.050, 8.051, 8.052, 8.053, 8.054, 8.055, 8.056, 8.057, 8.058, 8.059, 8.059, 8.059,
                8.059, 8.059, 8.059, 8.059, 8.059, 8.059, 8.060, 8.060, 8.061, 8.061, 8.061, 8.062, 8.062, 8.063, 8.062, 8.061,
                8.061, 8.060, 8.059, 8.058, 8.058, 8.058, 8.058, 8.059, 8.060, 8.060, 8.061, 8.062, 8.063, 8.063, 8.063, 8.063,
                8.062, 8.062, 8.061, 8.061, 8.060, 8.060, 8.061, 8.061, 8.062, 8.062, 8.063, 8.064, 8.064, 8.065, 8.066, 8.066};
        for (int i = 0; i < 1024; i++) {
            assertTrue("The array sn should be " + sn_values[i] + " at i=" + i + ", but is:" + test_me.s_n[i], Math.abs(test_me.s_n[i] - sn_values[i]) < 1e-3);
        }


        double[] on_values = {
                0.067, 0.135, 0.202, 0.270, 0.337, 0.405, 0.472, 0.404, 0.274, 0.138, -0.003, -0.148, -0.295, -0.445, -0.499, -0.528,
                -0.558, -0.587, -0.617, -0.646, -0.676, -0.705, -0.808, -0.913, -1.019, -1.126, -1.232, -1.339, -1.446, -1.435, -1.374, -1.313,
                -1.253, -1.194, -1.135, -1.077, -1.019, -0.970, -0.954, -0.938, -0.922, -0.906, -0.891, -0.875, -0.860, -0.844, -0.808, -0.773,
                -0.737, -0.702, -0.667, -0.632, -0.597, -0.562, -0.658, -0.818, -0.979, -1.140, -1.302, -1.465, -1.629, -1.558, -1.451, -1.345,
                -1.239, -1.134, -1.030, -0.925, -0.822, -0.718, -0.913, -1.114, -1.315, -1.517, -1.720, -1.924, -2.007, -1.966, -1.924, -1.883,
                -1.842, -1.800, -1.759, -1.718, -1.681, -1.675, -1.668, -1.662, -1.656, -1.650, -1.643, -1.637, -1.631, -1.745, -1.860, -1.975,
                -2.090, -2.205, -2.321, -2.437, -2.361, -2.245, -2.131, -2.016, -1.902, -1.788, -1.674, -1.561, -1.448, -1.408, -1.378, -1.348,
                -1.318, -1.288, -1.258, -1.228, -1.198, -1.225, -1.292, -1.360, -1.428, -1.495, -1.563, -1.631, -1.692, -1.590, -1.489, -1.387,
                -1.286, -1.186, -1.085, -0.984, -0.884, -0.776, -0.631, -0.487, -0.342, -0.199, -0.055, 0.088, 0.231, 0.374, 0.516, 0.644,
                0.771, 0.898, 1.024, 1.150, 1.276, 1.402, 1.528, 1.654, 1.450, 1.192, 0.934, 0.674, 0.413, 0.152, 0.113, 0.097,
                0.080, 0.063, 0.047, 0.030, 0.013, -0.003, -0.022, -0.040, -0.058, -0.077, -0.095, -0.114, -0.132, -0.149, -0.141, -0.133,
                -0.125, -0.118, -0.110, -0.102, -0.094, -0.087, 0.026, 0.145, 0.265, 0.384, 0.504, 0.623, 0.742, 0.861, 0.979, 0.985,
                0.978, 0.972, 0.965, 0.958, 0.951, 0.945, 0.938, 0.833, 0.716, 0.598, 0.481, 0.363, 0.245, 0.127, 0.006, -0.115,
                -0.237, -0.359, -0.482, -0.604, -0.727, -0.797, -0.844, -0.890, -0.937, -0.984, -1.031, -1.078, -1.125, -1.011, -0.898, -0.785,
                -0.672, -0.559, -0.446, -0.333, -0.221, -0.111, -0.105, -0.098, -0.091, -0.084, -0.077, -0.070, -0.063, -0.057, -0.092, -0.133,
                -0.173, -0.213, -0.253, -0.293, -0.334, -0.379, -0.451, -0.524, -0.596, -0.668, -0.741, -0.813, -0.885, -1.013, -1.168, -1.322,
                -1.477, -1.631, -1.786, -1.941, -2.058, -2.167, -2.277, -2.387, -2.496, -2.606, -2.716, -2.785, -2.832, -2.879, -2.926, -2.972,
                -3.019, -3.066, -3.113, -3.227, -3.343, -3.460, -3.577, -3.694, -3.811, -3.928, -3.988, -4.035, -4.082, -4.129, -4.176, -4.223,
                -4.270, -4.312, -4.315, -4.318, -4.321, -4.324, -4.327, -4.330, -4.333, -4.339, -4.381, -4.423, -4.464, -4.506, -4.547, -4.589,
                -4.631, -4.643, -4.598, -4.553, -4.508, -4.463, -4.418, -4.373, -4.328, -4.283, -4.360, -4.447, -4.534, -4.621, -4.709, -4.796,
                -4.883, -4.883, -4.806, -4.730, -4.654, -4.578, -4.501, -4.425, -4.349, -4.273, -4.377, -4.507, -4.638, -4.768, -4.899, -5.029,
                -5.160, -5.207, -5.238, -5.268, -5.299, -5.329, -5.360, -5.390, -5.421, -5.497, -5.573, -5.649, -5.725, -5.801, -5.878, -5.954,
                -5.935, -5.835, -5.734, -5.634, -5.534, -5.433, -5.333, -5.233, -5.133, -5.196, -5.333, -5.470, -5.608, -5.745, -5.882, -6.020,
                -6.068, -6.077, -6.085, -6.094, -6.103, -6.112, -6.121, -6.130, -6.202, -6.301, -6.401, -6.500, -6.599, -6.698, -6.798, -6.750,
                -6.493, -6.236, -5.980, -5.724, -5.469, -5.214, -4.959, -4.705, -4.451, -4.289, -4.303, -4.316, -4.329, -4.343, -4.356, -4.370,
                -4.383, -4.376, -4.335, -4.294, -4.254, -4.213, -4.172, -4.132, -4.091, -4.051, -4.192, -4.334, -4.476, -4.617, -4.759, -4.901,
                -5.033, -4.982, -4.930, -4.879, -4.828, -4.777, -4.726, -4.675, -4.624, -4.555, -4.473, -4.392, -4.311, -4.229, -4.148, -4.067,
                -3.985, -3.904, -3.902, -3.911, -3.920, -3.929, -3.938, -3.947, -3.956, -3.965, -4.015, -4.081, -4.147, -4.213, -4.279, -4.345,
                -4.411, -4.469, -4.488, -4.507, -4.526, -4.544, -4.563, -4.582, -4.601, -4.580, -4.440, -4.300, -4.160, -4.020, -3.880, -3.741,
                -3.601, -3.462, -3.345, -3.427, -3.509, -3.591, -3.673, -3.755, -3.837, -3.919, -3.954, -3.965, -3.977, -3.989, -4.000, -4.012,
                -4.024, -4.036, -3.931, -3.777, -3.624, -3.471, -3.317, -3.164, -3.011, -2.858, -2.706, -2.606, -2.574, -2.542, -2.510, -2.477,
                -2.445, -2.413, -2.381, -2.335, -2.188, -2.041, -1.895, -1.748, -1.602, -1.455, -1.309, -1.163, -1.017, -1.029, -1.059, -1.089,
                -1.119, -1.149, -1.179, -1.209, -1.245, -1.365, -1.485, -1.605, -1.725, -1.845, -1.965, -2.085, -2.016, -1.938, -1.861, -1.783,
                -1.705, -1.627, -1.549, -1.472, -1.431, -1.490, -1.548, -1.606, -1.665, -1.723, -1.781, -1.840, -1.925, -2.023, -2.121, -2.219,
                -2.318, -2.416, -2.515, -2.546, -2.465, -2.385, -2.305, -2.225, -2.145, -2.065, -1.986, -1.906, -1.876, -1.871, -1.866, -1.860,
                -1.855, -1.849, -1.844, -1.838, -1.792, -1.716, -1.639, -1.563, -1.486, -1.410, -1.334, -1.257, -1.181, -1.305, -1.451, -1.597,
                -1.743, -1.890, -2.036, -2.182, -2.193, -2.202, -2.211, -2.221, -2.230, -2.239, -2.249, -2.258, -2.232, -2.207, -2.181, -2.156,
                -2.130, -2.104, -2.079, -2.053, -2.165, -2.327, -2.489, -2.652, -2.814, -2.977, -3.139, -3.126, -3.102, -3.079, -3.056, -3.032,
                -3.009, -2.986, -2.962, -2.893, -2.803, -2.714, -2.624, -2.535, -2.446, -2.356, -2.267, -2.178, -2.435, -2.721, -3.006, -3.292,
                -3.578, -3.811, -3.631, -3.450, -3.270, -3.090, -2.910, -2.730, -2.550, -2.370, -2.190, -2.113, -2.096, -2.079, -2.062, -2.045,
                -2.029, -2.012, -1.995, -2.018, -2.095, -2.172, -2.250, -2.327, -2.404, -2.481, -2.558, -2.653, -2.748, -2.842, -2.937, -3.032,
                -3.127, -3.222, -3.306, -3.384, -3.462, -3.541, -3.619, -3.697, -3.775, -3.826, -3.772, -3.717, -3.663, -3.609, -3.554, -3.500,
                -3.446, -3.391, -3.344, -3.299, -3.254, -3.209, -3.165, -3.120, -3.075, -3.030, -2.977, -2.904, -2.832, -2.759, -2.686, -2.613,
                -2.540, -2.468, -2.395, -2.374, -2.380, -2.386, -2.393, -2.399, -2.405, -2.411, -2.417, -2.383, -2.326, -2.268, -2.211, -2.153,
                -2.096, -2.038, -1.981, -1.927, -1.901, -1.875, -1.849, -1.823, -1.797, -1.771, -1.746, -1.720, -1.629, -1.527, -1.425, -1.322,
                -1.220, -1.118, -1.016, -0.914, -0.812, -0.754, -0.699, -0.643, -0.587, -0.532, -0.476, -0.421, -0.365, -0.388, -0.506, -0.624,
                -0.742, -0.860, -0.978, -1.096, -1.185, -1.218, -1.250, -1.282, -1.314, -1.346, -1.378, -1.410, -1.467, -1.545, -1.624, -1.703,
                -1.781, -1.860, -1.939, -2.018, -2.111, -2.203, -2.296, -2.389, -2.481, -2.574, -2.666, -2.688, -2.686, -2.684, -2.682, -2.680,
                -2.678, -2.676, -2.674, -2.685, -2.703, -2.722, -2.740, -2.758, -2.776, -2.795, -2.813, -2.840, -2.871, -2.902, -2.932, -2.963,
                -2.994, -3.024, -3.055, -2.990, -2.916, -2.842, -2.768, -2.695, -2.621, -2.547, -2.473, -2.406, -2.358, -2.309, -2.261, -2.212,
                -2.163, -2.115, -2.066, -2.018, -1.982, -1.950, -1.917, -1.885, -1.853, -1.820, -1.788, -1.755, -1.734, -1.722, -1.711, -1.700,
                -1.689, -1.678, -1.667, -1.656, -1.656, -1.680, -1.703, -1.726, -1.750, -1.773, -1.796, -1.819, -1.800, -1.729, -1.658, -1.587,
                -1.517, -1.446, -1.375, -1.305, -1.234, -1.231, -1.241, -1.251, -1.261, -1.272, -1.282, -1.292, -1.303, -1.368, -1.443, -1.518,
                -1.594, -1.669, -1.744, -1.820, -1.813, -1.673, -1.532, -1.392, -1.252, -1.111, -0.971, -0.831, -0.691, -0.588, -0.638, -0.688,
                -0.737, -0.787, -0.837, -0.887, -0.937, -0.928, -0.867, -0.806, -0.745, -0.684, -0.623, -0.562, -0.501, -0.440, -0.405, -0.370,
                -0.335, -0.301, -0.266, -0.231, -0.197, -0.162, -0.256, -0.426, -0.597, -0.767, -0.937, -1.107, -1.278, -1.400, -1.519, -1.638,
                -1.757, -1.875, -1.994, -2.113, -2.126, -2.112, -2.099, -2.086, -2.072, -2.059, -2.046, -2.032, -2.052, -2.092, -2.131, -2.171,
                -2.210, -2.250, -2.289, -2.329, -2.268, -2.193, -2.118, -2.043, -1.968, -1.893, -1.819, -1.744, -1.682, -1.669, -1.655, -1.642,
                -1.628, -1.614, -1.601, -1.587, -1.580, -1.717, -1.853, -1.989, -2.126, -2.262, -2.399, -2.526, -2.520, -2.515, -2.509, -2.503,
                -2.497, -2.491, -2.486, -2.480, -2.420, -2.358, -2.295, -2.233, -2.170, -2.108, -2.045, -1.983, -1.943, -1.939, -1.936, -1.932,
                -1.928, -1.924, -1.921, -1.917, -1.881, -1.765, -1.650, -1.535, -1.420, -1.305, -1.190, -1.075, -0.960, -0.879, -0.874, -0.869,
                -0.864, -0.859, -0.854, -0.849, -0.844, -0.830, -0.782, -0.734, -0.685, -0.637, -0.589, -0.541, -0.492, -0.444, -0.501, -0.593,
                -0.685, -0.778, -0.870, -0.962, -1.054, -1.070, -0.981, -0.892, -0.803, -0.714, -0.625, -0.536, -0.447, -0.358, -0.365, -0.426,
                -0.486, -0.547, -0.608, -0.669, -0.729, -0.781, -0.702, -0.623, -0.544, -0.465, -0.387, -0.308, -0.229, -0.150, -0.073, 0.000};

        // Loop over sn and on and assert equality with the given arrays.
        for (int i = 0; i < 1024; i++) {
            assertTrue("The array sn should be " + on_values[i] + " at i=" + i + ", but is:" + test_me.time_offsets[i], Math.abs(test_me.time_offsets[i] - on_values[i]) < 1e-3);
        }
    }
}
