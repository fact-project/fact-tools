<container>

    <properties url="classpath:/default/settings.properties" />


    <!-- Pathes to the input files -->
    <property name="num_copies" value="4" />

    <property name="infolder" value="file:/Users/kai/fact_phido/simulated/ceres/proton_peter_12/" />
    <property name="outfolder" value="file:/Users/kai/" />
    <property name="filename" value="proton" />

    <property name="integralGainFile" value="classpath:/default/defaultIntegralGains.csv" />
    <property name="drsfile" value="classpath:/testMcDrsFile.drs.fits.gz" />

    <service id="auxService" class="fact.auxservice.AuxFileService" auxFolder="file:src/main/resources/aux/" />


        <stream id="fact" class="fact.io.RecursiveDirectoryStream"
                pattern="**/298*/*_Events.fits.gz"  url="${infolder}">
            <stream class="fact.io.FitsStream" id="_" />
        </stream>


    <queue id="result" />

<!--    <process id="2" input="fact">-->
    <process id="2" input="fact" copies="${num_copies}">

    <!--<stream.flow.Skip condition="%{data.EventNum} != 40" />-->
        <!-- <stream.flow.Skip condition="%{data.MCorsikaEvtHeader.fTotalEnergy} &gt; 400" /> -->
        <!--        <fact.io.PrintKeysOnConsole keys="MCorsikaEvtHeader.fTotalEnergy" />-->
        <!-- <stream.flow.Skip condition="%{data.EventNum} &lt;0" /> -->

        <include url="classpath:/default/mc/calibration_mc.xml" />
        <!--        <include url="classpath:/default/mc/extraction_mc.xml" />-->

        <!--        <include url="classpath:/default/mc/cleaning_mc.xml" />-->

        <!-- <Skip condition="%{data.shower} == null" /> -->

        <fact.extraction.BasicExtraction
                dataKey="DataCalibrated"
                outputKeyMaxAmplPos="maxPos"
                outputKeyPhotonCharge="photoncharge"
                url="${integralGainFile}"
                startSearchWindow="${basicExtraction_startSearchWindow}"
                rangeSearchWindow="${basicExtraction_rangeSearchWindow}"
                rangeHalfHeightWindow="${basicExtraction_rangeHalfHeigthWindow}"/>

        <fact.extraction.RisingEdgeForPositions
                dataKey="DataCalibrated"
                outputKey="ArrtimePos"
                amplitudePositionsKey="maxPos"
                maxSlopesKey="maxSlope"/>


        <fact.cleaning.MotionCleaning
                threshold = "30"
                outputKey = "shower"/>

        <Skip condition="%{data.NumShowerPixel} &lt; 15 "/>

        <fact.features.DistributionFromShower
                weightsKey="photoncharge"
                showerKey="shower"
                sizeKey="Size"
                outputKey="showerDistribution"
                />



        <fact.hexmap.ClusterFellwalker />




         <!--<Skip condition="%{data.NumCluster} == 0" />-->




       <!-- <fact.ShowViewer key="DataCalibrated"/>-->
        <Enqueue queue="result"/>

        <!--<fact.io.JSONWriter keys="EventNum,NumClusterPixel,NumCluster,Waste,SizeX,SizeY,SizeAbs,MaximaID,DistanceMaxima,BrightnessMaxima,ClusterArrivaltimeMaxima,ClusterArrivaltimeMean,ClusterBrightnessSum,ClusterBrightnessMean" url="${outfolder}proton_${copy.id}.json" />-->
        <!--<fact.ShowViewer key="DataCalibrated"/>-->
    </process>

    <process input="result" id="egal" >
        <stream.monitor.DataRate every="20" />
        <!--<fact.io.JSONWriter keys="EventNum,MCorsikaEvtHeader.fTotalEnergy,NumCluster,NumClusterPixel,StdNumPixel,MaxClusterNumPixel,ChargeMax,BoundRatio,IdealBoundDiff,BoundAngleSum,DistanceCenterSum,NeighborCluster" url="${outfolder}/${filename}.json" />-->
    </process>

</container>
